{
  "generated_at": "2025-10-19T03:16:35.377274Z",
  "scripts_directory": "scripts",
  "total_scripts": 105,
  "scripts": {
    "scripts/aggregate_coverage.py": {
      "name": "aggregate_coverage",
      "path": "scripts/aggregate_coverage.py",
      "size_bytes": 2743,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Aggregate frontend (Jest) and backend (pytest) coverage results.",
      "full_docstring": "Aggregate frontend (Jest) and backend (pytest) coverage results.",
      "functions": [
        {
          "name": "_read_frontend_lines",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_read_backend_lines",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 87,
      "code_lines": 69,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/aggregate_evidence_01.py": {
      "name": "aggregate_evidence_01",
      "path": "scripts/aggregate_evidence_01.py",
      "size_bytes": 5771,
      "last_modified": "2025-10-19T09:52:26.474413",
      "description": "Evidence aggregation for Protocol 01 (00A): Client Proposal Generation.",
      "full_docstring": "Evidence aggregation for Protocol 01 (00A): Client Proposal Generation.\n\nCollects all gate validation results and artifacts into a consolidated evidence manifest.",
      "functions": [
        {
          "name": "run_gate_validator",
          "docstring": "Run a gate validator and capture results.\n\nArgs:\n    validator_script: Path to validator script\n    \nReturns:\n    Validation result dict",
          "is_public": true
        },
        {
          "name": "aggregate_evidence",
          "docstring": "Aggregate evidence from all Protocol 01 gates.\n\nArgs:\n    output_dir: Output directory for aggregated evidence\n    protocol_id: Protocol identifier (default: 01)",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 177,
      "code_lines": 143,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/aggregate_evidence_02.py": {
      "name": "aggregate_evidence_02",
      "path": "scripts/aggregate_evidence_02.py",
      "size_bytes": 5221,
      "last_modified": "2025-10-19T09:53:31.349351",
      "description": "Evidence aggregation for Protocol 02 (00B): Client Discovery Initiation.",
      "full_docstring": "Evidence aggregation for Protocol 02 (00B): Client Discovery Initiation.\n\nCollects all gate validation results and artifacts into a consolidated evidence manifest.",
      "functions": [
        {
          "name": "run_gate_validator",
          "docstring": "Run a gate validator and capture results.",
          "is_public": true
        },
        {
          "name": "aggregate_evidence",
          "docstring": "Aggregate evidence from all Protocol 02 gates.",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 154,
      "code_lines": 129,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/aggregate_evidence_03.py": {
      "name": "aggregate_evidence_03",
      "path": "scripts/aggregate_evidence_03.py",
      "size_bytes": 5120,
      "last_modified": "2025-10-19T09:54:28.038095",
      "description": "Evidence aggregation for Protocol 03 (01): Project Brief Creation.",
      "full_docstring": "Evidence aggregation for Protocol 03 (01): Project Brief Creation.\n\nCollects all gate validation results and artifacts into a consolidated evidence manifest.",
      "functions": [
        {
          "name": "run_gate_validator",
          "docstring": "Run a gate validator and capture results.",
          "is_public": true
        },
        {
          "name": "aggregate_evidence",
          "docstring": "Aggregate evidence from all Protocol 03 gates.",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 153,
      "code_lines": 128,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/ai_executor.py": {
      "name": "ai_executor",
      "path": "scripts/ai_executor.py",
      "size_bytes": 25114,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "AI Executor for Unified Developer Workflow",
      "full_docstring": "AI Executor for Unified Developer Workflow\n\nMain orchestrator that executes the complete unified workflow from bootstrap to operations\nwith AI automation and human validation gates.",
      "functions": [
        {
          "name": "cli",
          "docstring": "AI Executor CLI for Unified Developer Workflow",
          "is_public": true
        },
        {
          "name": "init",
          "docstring": "Initialize workflow for a project",
          "is_public": true
        },
        {
          "name": "full_workflow",
          "docstring": "Execute full unified workflow",
          "is_public": true
        },
        {
          "name": "phase",
          "docstring": "Execute single phase",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_load_project_config",
          "docstring": "Load project configuration",
          "is_public": false
        },
        {
          "name": "_save_project_config",
          "docstring": "Save project configuration",
          "is_public": false
        },
        {
          "name": "_build_governor_payload",
          "docstring": "Create a payload for AI Governor validation.",
          "is_public": false
        },
        {
          "name": "_prepare_phase_integrations",
          "docstring": "Prepare external integrations before executing a phase.",
          "is_public": false
        },
        {
          "name": "_finalize_phase_integrations",
          "docstring": "Finalize integrations after phase execution.",
          "is_public": false
        },
        {
          "name": "_print_service_summary",
          "docstring": "Pretty print external service summary.",
          "is_public": false
        },
        {
          "name": "_log_phase_start",
          "docstring": "Log phase start",
          "is_public": false
        },
        {
          "name": "_log_phase_end",
          "docstring": "Log phase end",
          "is_public": false
        },
        {
          "name": "_execute_phase",
          "docstring": "Execute a single phase",
          "is_public": false
        },
        {
          "name": "_generate_phase_outputs",
          "docstring": "Generate simulated phase outputs",
          "is_public": false
        },
        {
          "name": "execute_full_workflow",
          "docstring": "Execute the complete unified workflow",
          "is_public": true
        },
        {
          "name": "_generate_final_report",
          "docstring": "Generate final workflow report",
          "is_public": false
        },
        {
          "name": "execute_single_phase",
          "docstring": "Execute a single phase",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "AIExecutor",
          "docstring": "Main AI executor for the unified workflow"
        }
      ],
      "total_lines": 640,
      "code_lines": 520,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/ai_orchestrator.py": {
      "name": "ai_orchestrator",
      "path": "scripts/ai_orchestrator.py",
      "size_bytes": 23819,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "AI Orchestrator for Unified Developer Workflow",
      "full_docstring": "AI Orchestrator for Unified Developer Workflow\n\nOrchestrates AI execution of individual phases with context management,\nrule compliance, and evidence tracking.",
      "functions": [
        {
          "name": "cli",
          "docstring": "AI Orchestrator CLI for Unified Developer Workflow",
          "is_public": true
        },
        {
          "name": "phase",
          "docstring": "Execute single phase with AI orchestration",
          "is_public": true
        },
        {
          "name": "sequence",
          "docstring": "Execute phase sequence with AI orchestration",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_load_project_config",
          "docstring": "Load project configuration",
          "is_public": false
        },
        {
          "name": "_load_phase_protocol",
          "docstring": "Load phase protocol content",
          "is_public": false
        },
        {
          "name": "_build_governor_payload",
          "docstring": "Create a payload for AI Governor validation.",
          "is_public": false
        },
        {
          "name": "_prepare_phase_integrations",
          "docstring": "Prepare external integrations for a phase.",
          "is_public": false
        },
        {
          "name": "_finalize_phase_integrations",
          "docstring": "Finalize integrations after phase execution.",
          "is_public": false
        },
        {
          "name": "_print_service_summary",
          "docstring": "Pretty print external service summary.",
          "is_public": false
        },
        {
          "name": "_execute_ai_phase",
          "docstring": "Execute AI phase with context and rules",
          "is_public": false
        },
        {
          "name": "_simulate_ai_execution",
          "docstring": "Simulate AI execution based on phase protocol",
          "is_public": false
        },
        {
          "name": "execute_phase",
          "docstring": "Execute a single phase with AI orchestration",
          "is_public": true
        },
        {
          "name": "execute_phase_sequence",
          "docstring": "Execute a sequence of phases",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "AIOrchestrator",
          "docstring": "AI orchestrator for individual phase execution"
        }
      ],
      "total_lines": 617,
      "code_lines": 498,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/analyze_brief.py": {
      "name": "analyze_brief",
      "path": "scripts/analyze_brief.py",
      "size_bytes": 7736,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Analyze PROJECT-BRIEF.md and output structured metadata.",
      "full_docstring": "Analyze PROJECT-BRIEF.md and output structured metadata.",
      "functions": [
        {
          "name": "extract_frontmatter",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "_parse_simple_frontmatter",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "strip_frontmatter",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "detect_stack",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "detect_compliance",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "detect_operations",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "detect_ml",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "detect_complexity",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "detect_lifecycle",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "determine_protocols",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "analyze_brief",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "to_json",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "BriefAnalysis",
          "docstring": ""
        }
      ],
      "total_lines": 269,
      "code_lines": 219,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/analyze_jobpost.py": {
      "name": "analyze_jobpost",
      "path": "scripts/analyze_jobpost.py",
      "size_bytes": 3103,
      "last_modified": "2025-10-18T16:11:25.794508",
      "description": "Real Job Post Analysis Script",
      "full_docstring": "Real Job Post Analysis Script\nActually parses and analyzes job post content",
      "functions": [
        {
          "name": "analyze_job_post",
          "docstring": "Actually analyze job post content",
          "is_public": true
        },
        {
          "name": "extract_tech_stack",
          "docstring": "Extract actual technology mentions",
          "is_public": true
        },
        {
          "name": "extract_timeline",
          "docstring": "Extract actual timeline information",
          "is_public": true
        },
        {
          "name": "extract_budget",
          "docstring": "Extract actual budget information",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 108,
      "code_lines": 82,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/analyze_project_rules.py": {
      "name": "analyze_project_rules",
      "path": "scripts/analyze_project_rules.py",
      "size_bytes": 8529,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "No description available",
      "full_docstring": "No description available",
      "functions": [
        {
          "name": "read_file",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_index",
          "docstring": "Parse INDEX.mdc into mapping of file base name -> category label.\nCategories: languages, frameworks, compliance, infrastructure, utilities",
          "is_public": true
        },
        {
          "name": "parse_frontmatter",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "detect_topic",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 223,
      "code_lines": 189,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/auto_register_scripts.py": {
      "name": "auto_register_scripts",
      "path": "scripts/auto_register_scripts.py",
      "size_bytes": 8376,
      "last_modified": "2025-10-19T11:13:08.956025",
      "description": "Auto-Register Scripts - Phase 3 Governance Tool",
      "full_docstring": "Auto-Register Scripts - Phase 3 Governance Tool\n\nAutomatically categorizes and registers orphaned scripts into script-registry.json\nbased on naming conventions, imports, and docstrings.",
      "functions": [
        {
          "name": "analyze_script",
          "docstring": "Analyze a Python script to determine its category.",
          "is_public": true
        },
        {
          "name": "categorize_script",
          "docstring": "Determine the category of a script based on its content and name.",
          "is_public": true
        },
        {
          "name": "update_registry",
          "docstring": "Update the registry with orphaned scripts.",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 260,
      "code_lines": 199,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/backup_workflows.py": {
      "name": "backup_workflows",
      "path": "scripts/backup_workflows.py",
      "size_bytes": 1477,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "No description available",
      "full_docstring": "No description available",
      "functions": [
        {
          "name": "ensure_dirs",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "create_archive",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "write_proof",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 53,
      "code_lines": 41,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/benchmark_generation.py": {
      "name": "benchmark_generation",
      "path": "scripts/benchmark_generation.py",
      "size_bytes": 1942,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Benchmark project generation (file I/O and template processing) without external deps.",
      "full_docstring": "Benchmark project generation (file I/O and template processing) without external deps.\n\nUsage:\n  python scripts/benchmark_generation.py",
      "functions": [
        {
          "name": "run_once",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 72,
      "code_lines": 59,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/bootstrap_project.py": {
      "name": "bootstrap_project",
      "path": "scripts/bootstrap_project.py",
      "size_bytes": 5153,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "One-command bootstrap that prepares docs and runs the end-to-end generator.",
      "full_docstring": "One-command bootstrap that prepares docs and runs the end-to-end generator.",
      "functions": [
        {
          "name": "load_config",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "resolve_settings",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "maybe_update_config",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "run_command",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "bootstrap",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 129,
      "code_lines": 102,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/brief_processor.py": {
      "name": "brief_processor",
      "path": "scripts/brief_processor.py",
      "size_bytes": 6906,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Unified brief processor adapter.",
      "full_docstring": "Unified brief processor adapter.",
      "functions": [
        {
          "name": "_load_project_generator_symbol",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "parse",
          "docstring": "Parse the brief and cache the resulting specification.",
          "is_public": true
        },
        {
          "name": "extract_metadata",
          "docstring": "Return metadata dictionary derived from the parsed brief.",
          "is_public": true
        },
        {
          "name": "generate_plan",
          "docstring": "Write ``PLAN.md`` to ``output_path`` and return the resulting path.",
          "is_public": true
        },
        {
          "name": "generate_tasks",
          "docstring": "Persist ``tasks.json`` derived from the parsed brief.",
          "is_public": true
        },
        {
          "name": "_load_spec",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_infer_complexity",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_resolve_project_name",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_extract_label",
          "docstring": "",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "ParsedBrief",
          "docstring": "Structured representation returned from :meth:`UnifiedBriefProcessor.parse`."
        },
        {
          "name": "UnifiedBriefProcessor",
          "docstring": "Parse briefs, extract metadata and generate planning artefacts."
        }
      ],
      "total_lines": 195,
      "code_lines": 150,
      "has_main_guard": false,
      "has_shebang": false,
      "is_executable": true
    },
    "scripts/check_compliance_docs.py": {
      "name": "check_compliance_docs",
      "path": "scripts/check_compliance_docs.py",
      "size_bytes": 2813,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "No description available",
      "full_docstring": "No description available",
      "functions": [
        {
          "name": "read_text",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "find_mentions",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 82,
      "code_lines": 61,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/check_hipaa.py": {
      "name": "check_hipaa",
      "path": "scripts/check_hipaa.py",
      "size_bytes": 4750,
      "last_modified": "2025-10-18T15:29:58.501549",
      "description": "HIPAA checks (lightweight):",
      "full_docstring": "HIPAA checks (lightweight):\n- Session timeout >= gates_config.yaml.auth_session_timeout_minutes_min if config file found\n- RBAC policy or module present (rbac.py or policies/rbac.*)\n- Audit logging module present (audit.py or middleware/audit.*)\n- No PHI-like terms in sample logs (logs/*.log) [best-effort]\n\nUsage:\n  python scripts/check_hipaa.py\nExit 0 if all checks pass; 1 otherwise.",
      "functions": [
        {
          "name": "load_min_session",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "check_rbac",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "check_audit_logging",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "check_no_phi_in_logs",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "check_session_timeout",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 144,
      "code_lines": 113,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/classify_domain.py": {
      "name": "classify_domain",
      "path": "scripts/classify_domain.py",
      "size_bytes": 15046,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Domain Classification Script",
      "full_docstring": "Domain Classification Script\n\nAutomatically classifies project domain from job post content using keyword analysis\nand pattern matching according to Protocol 00 standards.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for domain classification.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "classify_domain",
          "docstring": "Classify domain from job post content.",
          "is_public": true
        },
        {
          "name": "classify_from_file",
          "docstring": "Classify domain from a file.",
          "is_public": true
        },
        {
          "name": "_generate_reasoning",
          "docstring": "Generate human-readable reasoning for classification.",
          "is_public": false
        },
        {
          "name": "get_domain_adapters",
          "docstring": "Get domain-specific extraction patterns and templates.",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "Domain",
          "docstring": "Project domain enumeration."
        },
        {
          "name": "DomainClassification",
          "docstring": "Domain classification result."
        },
        {
          "name": "DomainClassifier",
          "docstring": "Classifies project domain from job post content."
        }
      ],
      "total_lines": 337,
      "code_lines": 269,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/collect_coverage.py": {
      "name": "collect_coverage",
      "path": "scripts/collect_coverage.py",
      "size_bytes": 976,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Collect Python coverage into coverage.xml using pytest-cov if available.",
      "full_docstring": "Collect Python coverage into coverage.xml using pytest-cov if available.\n- If pytest-cov is missing, exits 0 and prints a hint.\n- Intended for CI gating before scripts/enforce_gates.py\n\nUsage:\n  python scripts/collect_coverage.py",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 36,
      "code_lines": 27,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/collect_perf.py": {
      "name": "collect_perf",
      "path": "scripts/collect_perf.py",
      "size_bytes": 2278,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Write metrics/perf.json with an http_p95_ms value.",
      "full_docstring": "Write metrics/perf.json with an http_p95_ms value.\n\nUsage examples:\n  PERF_P95_MS=420 python scripts/collect_perf.py\n  # or\n  echo 420 > metrics/input_perf.txt && python scripts/collect_perf.py\n\nThe script now fails fast when no valid measurement is supplied so CI cannot\nadvance without real performance evidence.",
      "functions": [
        {
          "name": "_read_perf_source",
          "docstring": "Return the raw value and its source identifier.",
          "is_public": false
        },
        {
          "name": "_validate_perf",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 83,
      "code_lines": 61,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/compare_pull_requests.py": {
      "name": "compare_pull_requests",
      "path": "scripts/compare_pull_requests.py",
      "size_bytes": 26781,
      "last_modified": "2025-10-19T00:42:39.164462",
      "description": "Pull Request Comparison Script",
      "full_docstring": "Pull Request Comparison Script\n\nProvides an offline-friendly workflow for comparing multiple GitHub pull requests\nand generating actionable review guidance. The script can fetch data directly from\nGitHub's REST API or ingest pre-exported JSON data for environments without\nnetwork access.",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_arguments",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "additions_plus_deletions",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "is_open",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "fetch",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "load_from_json",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "render_markdown",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "render_text",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "_fetch_pull_request",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_fetch_reviews",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_fetch_files",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_paginate",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_normalize_payload",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_enrich_summaries",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_detect_tests",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_extract_dependencies",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_assess_risk",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_determine_priority",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_recommend_action",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_render_summary_table",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_render_review_signals",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_render_dependency_map",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_render_recommended_order",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_render_conflict_matrix",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_render_detailed_notes",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_summarize_body",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_compute_order",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_sort_key",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_find_summary",
          "docstring": "",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "PullRequestSummary",
          "docstring": "Normalized data about a pull request with derived insights."
        },
        {
          "name": "PullRequestComparator",
          "docstring": "Compare multiple pull requests and generate review recommendations."
        }
      ],
      "total_lines": 656,
      "code_lines": 592,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/compliance_validator.py": {
      "name": "compliance_validator",
      "path": "scripts/compliance_validator.py",
      "size_bytes": 20337,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Unified compliance validation module.",
      "full_docstring": "Unified compliance validation module.\n\nThis module integrates compliance validation from the legacy scripts\nand provides a clean interface for the unified workflow.",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI entry point for backward compatibility with validate_compliance_assets.py.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "Initialize the compliance validator.\n\nArgs:\n    root_path: Root path of the project. If None, uses parent of unified-workflow.",
          "is_public": false
        },
        {
          "name": "_normalize_list",
          "docstring": "Normalize a string or sequence into a list of trimmed strings.",
          "is_public": false
        },
        {
          "name": "_normalize_standards",
          "docstring": "Normalize compliance standards to lowercase identifiers.",
          "is_public": false
        },
        {
          "name": "_build_generator",
          "docstring": "Build a project generator instance with optional overrides.",
          "is_public": false
        },
        {
          "name": "_default_control_config",
          "docstring": "Return baseline configuration for a compliance standard.",
          "is_public": false
        },
        {
          "name": "_run_control_checks",
          "docstring": "Evaluate a set of compliance controls against a configuration.",
          "is_public": false
        },
        {
          "name": "validate_compliance_docs",
          "docstring": "Validate compliance documentation against generator output.\n\nArgs:\n    write: If True, update files with generator output instead of just checking.\n    standards: Optional list of compliance standards to evaluate.\n\nReturns:\n    Tuple of (all_valid, results_dict) where results_dict contains\n    validation status and diffs for each file.",
          "is_public": true
        },
        {
          "name": "_compare_file",
          "docstring": "Compare file content with expected and optionally update.\n\nArgs:\n    path: Path to the file to check\n    expected: Expected content\n    write: If True, write expected content to file\n    name: Name for logging\n    \nReturns:\n    Tuple of (is_valid, diff_text)",
          "is_public": false
        },
        {
          "name": "validate_hipaa_compliance",
          "docstring": "Run HIPAA-specific compliance checks.",
          "is_public": true
        },
        {
          "name": "validate_soc2_compliance",
          "docstring": "Run SOC2-specific compliance checks.",
          "is_public": true
        },
        {
          "name": "validate_pci_compliance",
          "docstring": "Run PCI-specific compliance checks.",
          "is_public": true
        },
        {
          "name": "generate_compliance_assets",
          "docstring": "Generate compliance reports and documentation for selected standards.",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "ComplianceValidator",
          "docstring": "Validates compliance documentation and gate configurations."
        }
      ],
      "total_lines": 541,
      "code_lines": 456,
      "has_main_guard": true,
      "has_shebang": false,
      "is_executable": true
    },
    "scripts/detect_instruction_conflicts.py": {
      "name": "detect_instruction_conflicts",
      "path": "scripts/detect_instruction_conflicts.py",
      "size_bytes": 19188,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Instruction Conflict Detection Script",
      "full_docstring": "Instruction Conflict Detection Script\n\nDetects ambiguous, conflicting, or contradictory instructions:\n- Contradiction detection\n- Ambiguity detection\n- Completeness validation",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for instruction conflict detection.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "detect_instruction_conflicts",
          "docstring": "Run comprehensive conflict detection across all protocols.",
          "is_public": true
        },
        {
          "name": "_detect_single_protocol_conflicts",
          "docstring": "Detect conflicts in a single protocol.",
          "is_public": false
        },
        {
          "name": "_detect_contradictions",
          "docstring": "Detect contradictory instructions.",
          "is_public": false
        },
        {
          "name": "_detect_circular_dependencies",
          "docstring": "Detect circular dependencies in instructions.",
          "is_public": false
        },
        {
          "name": "_detect_ambiguities",
          "docstring": "Detect ambiguous instructions.",
          "is_public": false
        },
        {
          "name": "_detect_pronoun_ambiguities",
          "docstring": "Detect unclear pronoun references.",
          "is_public": false
        },
        {
          "name": "_detect_completeness_issues",
          "docstring": "Detect completeness issues in instructions.",
          "is_public": false
        },
        {
          "name": "_detect_missing_error_handling",
          "docstring": "Detect missing error handling in instructions.",
          "is_public": false
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around a match.",
          "is_public": false
        },
        {
          "name": "_extract_context_around_pattern",
          "docstring": "Extract context around a specific pattern.",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "InstructionConflictDetector",
          "docstring": "Detects conflicts and ambiguities in protocol instructions."
        }
      ],
      "total_lines": 439,
      "code_lines": 331,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/doctor.py": {
      "name": "doctor",
      "path": "scripts/doctor.py",
      "size_bytes": 2883,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Environment Doctor",
      "full_docstring": "Environment Doctor\n\nProbes Docker/Node/npm/Python/pip/Go, detects CI/non-Docker envs,\nand prints actionable PASS/FAIL checks.",
      "functions": [
        {
          "name": "check",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "print_result",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 86,
      "code_lines": 63,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/enforce_gates.py": {
      "name": "enforce_gates",
      "path": "scripts/enforce_gates.py",
      "size_bytes": 6450,
      "last_modified": "2025-10-18T15:30:01.977549",
      "description": "Numeric gates enforcer for CI.",
      "full_docstring": "Numeric gates enforcer for CI.\n\nReads thresholds from either:\n- metrics.thresholds (new-style), or\n- quality_gates.* (existing generator schema)\n\nMetrics files expected:\n- coverage/coverage-summary.json OR coverage.xml\n- metrics/deps.json \u2192 {\"critical\": int, \"high\": int}\n- metrics/perf.json \u2192 {\"http_p95_ms\": float} (optional)",
      "functions": [
        {
          "name": "_read_yaml",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_read_json",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "read_coverage_pct",
          "docstring": "Return coverage percent in 0..100, from Node summary or Python coverage.xml.",
          "is_public": true
        },
        {
          "name": "read_deps_counts",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "read_perf_p95_ms",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "thresholds_from_quality_gates",
          "docstring": "Normalize existing quality_gates schema into thresholds strings.",
          "is_public": true
        },
        {
          "name": "parse_expr",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 187,
      "code_lines": 140,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/enrich_tasks.py": {
      "name": "enrich_tasks",
      "path": "scripts/enrich_tasks.py",
      "size_bytes": 5236,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Enrich tasks.json with personas and acceptance criteria.",
      "full_docstring": "Enrich tasks.json with personas and acceptance criteria.\n- Idempotent: does not duplicate existing acceptance items\n- Portable: works with list or dict-of-lists structures\n\nUsage:\n  python scripts/enrich_tasks.py --input tasks.json [--output tasks.json]\n  # If --output omitted, updates input in-place.\n\nExit codes:\n  0 success, 2 on invalid/missing input",
      "functions": [
        {
          "name": "_dedup_preserve",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_coerce_list",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_enrich_task",
          "docstring": "Return (persona_changed, acceptance_changed, task).",
          "is_public": false
        },
        {
          "name": "_iter_tasks",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 182,
      "code_lines": 148,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/evidence_manager.py": {
      "name": "evidence_manager",
      "path": "scripts/evidence_manager.py",
      "size_bytes": 22576,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Evidence Manager for Unified Developer Workflow",
      "full_docstring": "Evidence Manager for Unified Developer Workflow\n\nManages evidence artifacts including manifest.json, run.log, and validation.md\nwith SHA-256 checksums and ISO8601 timestamps for complete audit trail.",
      "functions": [
        {
          "name": "cli",
          "docstring": "Evidence Manager CLI for Unified Developer Workflow",
          "is_public": true
        },
        {
          "name": "log_artifact",
          "docstring": "Log an artifact to the manifest",
          "is_public": true
        },
        {
          "name": "log_execution",
          "docstring": "Log execution entry to run.log",
          "is_public": true
        },
        {
          "name": "validate",
          "docstring": "Validate evidence completeness and integrity",
          "is_public": true
        },
        {
          "name": "report",
          "docstring": "Generate comprehensive evidence report",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_initialize_evidence_files",
          "docstring": "Initialize evidence files with proper structure",
          "is_public": false
        },
        {
          "name": "_get_timestamp",
          "docstring": "Get current timestamp in ISO8601 format",
          "is_public": false
        },
        {
          "name": "_calculate_checksum",
          "docstring": "Calculate SHA-256 checksum of a file",
          "is_public": false
        },
        {
          "name": "_write_json",
          "docstring": "Write JSON data to file with proper formatting",
          "is_public": false
        },
        {
          "name": "_write_file",
          "docstring": "Write content to file",
          "is_public": false
        },
        {
          "name": "_read_json",
          "docstring": "Read JSON data from file",
          "is_public": false
        },
        {
          "name": "load_evidence",
          "docstring": "Load evidence, automatically converting from legacy format if needed.\n\nArgs:\n    project_name: Name of the project (for legacy conversion)\n    workflow_version: Version of the workflow (for legacy conversion)\n\nReturns:\n    Evidence in unified format",
          "is_public": true
        },
        {
          "name": "log_artifact",
          "docstring": "Log an artifact to the manifest with checksum and timestamp\n\nArgs:\n    path: Relative path to the artifact\n    category: Category of the artifact (documentation, code, config, etc.)\n    description: Human-readable description\n    phase: Phase number (0-6)\n    \nReturns:\n    True if successful, False otherwise",
          "is_public": true
        },
        {
          "name": "log_execution",
          "docstring": "Log execution entry to run.log\n\nArgs:\n    phase: Phase number (0-6)\n    action: Action performed\n    status: Status (started, completed, failed, skipped)\n    details: Additional details\n    duration_seconds: Duration in seconds\n    \nReturns:\n    True if successful, False otherwise",
          "is_public": true
        },
        {
          "name": "log_validation",
          "docstring": "Log validation results to validation.md\n\nArgs:\n    phase: Phase number (0-6)\n    status: Validation status (pending, in_progress, passed, failed, skipped)\n    score: Quality score (0-10)\n    findings: List of findings with severity, category, description, recommendation\n    recommendations: List of recommendations\n    \nReturns:\n    True if successful, False otherwise",
          "is_public": true
        },
        {
          "name": "validate_evidence",
          "docstring": "Validate evidence completeness and integrity\n\nArgs:\n    phase: Specific phase to validate (None for all phases)\n    \nReturns:\n    Validation results with status and details",
          "is_public": true
        },
        {
          "name": "generate_report",
          "docstring": "Generate comprehensive evidence report\n\nArgs:\n    phase_range: Tuple of (start_phase, end_phase) or None for all phases\n    \nReturns:\n    Comprehensive report with all evidence data",
          "is_public": true
        },
        {
          "name": "_read_validation_content",
          "docstring": "Read validation.md content",
          "is_public": false
        },
        {
          "name": "_generate_summary",
          "docstring": "Generate summary statistics",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "EvidenceManager",
          "docstring": "Manages evidence artifacts for the unified workflow"
        }
      ],
      "total_lines": 601,
      "code_lines": 448,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/evidence_report.py": {
      "name": "evidence_report",
      "path": "scripts/evidence_report.py",
      "size_bytes": 1262,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Generate a consolidated evidence report from a workflow run.",
      "full_docstring": "Generate a consolidated evidence report from a workflow run.",
      "functions": [
        {
          "name": "load_manifest",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "generate_report",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 39,
      "code_lines": 29,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/evidence_schema_converter.py": {
      "name": "evidence_schema_converter",
      "path": "scripts/evidence_schema_converter.py",
      "size_bytes": 17057,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Evidence Schema Converter - Migrates between legacy and unified evidence formats.",
      "full_docstring": "Evidence Schema Converter - Migrates between legacy and unified evidence formats.\n\nThis module provides tools to convert evidence between the legacy workflow_automation\nformat and the new unified-workflow format, ensuring backward compatibility.",
      "functions": [
        {
          "name": "legacy_to_unified",
          "docstring": "Convert legacy evidence format to unified format.\n\nLegacy format is a simple list of artifacts:\n[\n    {\n        \"path\": \"docs/README.md\",\n        \"category\": \"documentation\",\n        \"description\": \"Project readme\",\n        \"checksum\": \"abc123...\",\n        \"created_at\": \"2025-01-01T00:00:00Z\"\n    },\n    ...\n]\n\nArgs:\n    legacy_evidence: List of evidence records in legacy format\n    project_name: Name of the project\n    workflow_version: Version of the workflow\n    phase: Phase number (0-6)\n    \nReturns:\n    Evidence in unified format with manifest, run_log, and validation sections",
          "is_public": true
        },
        {
          "name": "unified_to_legacy",
          "docstring": "Convert unified evidence format to legacy format.\n\nArgs:\n    unified_evidence: Evidence in unified format\n    \nReturns:\n    List of evidence records in legacy format",
          "is_public": true
        },
        {
          "name": "merge_evidence",
          "docstring": "Merge two unified evidence objects, with primary taking precedence.\n\nArgs:\n    primary: Primary evidence (takes precedence in conflicts)\n    secondary: Secondary evidence to merge\n    \nReturns:\n    Merged evidence in unified format",
          "is_public": true
        },
        {
          "name": "validate_schema",
          "docstring": "Validate evidence against the unified schema.\n\nArgs:\n    evidence: Evidence to validate\n    schema_path: Path to schema file (uses default if not provided)\n    \nReturns:\n    Validation result with 'valid' boolean and 'errors' list",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "Initialize the evidence migrator.\n\nArgs:\n    unified_root: Root directory for unified evidence\n    legacy_root: Root directory for legacy evidence",
          "is_public": false
        },
        {
          "name": "migrate_legacy_evidence",
          "docstring": "Migrate legacy evidence to unified format.\n\nArgs:\n    project_name: Name of the project\n    phase: Phase number for migration\n    dry_run: If True, don't write files\n    \nReturns:\n    Migration result with status and details",
          "is_public": true
        },
        {
          "name": "_format_validation_markdown",
          "docstring": "Format validation data as markdown.\n\nArgs:\n    validation_data: Validation section of unified evidence\n    \nReturns:\n    Formatted markdown string",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "EvidenceSchemaConverter",
          "docstring": "Converts evidence between legacy and unified formats."
        },
        {
          "name": "EvidenceMigrator",
          "docstring": "Handles migration of evidence between directories and formats."
        }
      ],
      "total_lines": 426,
      "code_lines": 332,
      "has_main_guard": false,
      "has_shebang": false,
      "is_executable": true
    },
    "scripts/external_services.py": {
      "name": "external_services",
      "path": "scripts/external_services.py",
      "size_bytes": 15449,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "External Services Integration for Unified Workflow.",
      "full_docstring": "External Services Integration for Unified Workflow.\n\nThis module provides integration with external services like Git, AI Governor,\nand Policy DSL, ensuring they're available at the appropriate workflow phases.",
      "functions": [
        {
          "name": "get_phase_0_services",
          "docstring": "Get services for Phase 0 (Bootstrap).\n\nArgs:\n    project_root: Project root directory\n    \nReturns:\n    Dictionary of services needed for bootstrap",
          "is_public": true
        },
        {
          "name": "get_phase_3_services",
          "docstring": "Get services for Phase 3 (Implementation).\n\nArgs:\n    project_root: Project root directory\n    \nReturns:\n    Dictionary of services needed for implementation",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "Initialize external services manager.\n\nArgs:\n    project_root: Root directory of the project",
          "is_public": false
        },
        {
          "name": "_initialize_services",
          "docstring": "Initialize all external service connections.",
          "is_public": false
        },
        {
          "name": "get_service",
          "docstring": "Get a specific service by name.\n\nArgs:\n    service_name: Name of the service\n    \nReturns:\n    Service instance or None if not found",
          "is_public": true
        },
        {
          "name": "validate_services",
          "docstring": "Validate all services are properly configured.\n\nReturns:\n    Validation results for each service",
          "is_public": true
        },
        {
          "name": "get_phase_services",
          "docstring": "Get services relevant for a specific phase.\n\nArgs:\n    phase: Phase number (0-6)\n    \nReturns:\n    Dictionary of relevant services for the phase",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "Initialize Git service.\n\nArgs:\n    project_root: Root directory of the project",
          "is_public": false
        },
        {
          "name": "validate",
          "docstring": "Validate Git is available and configured.\n\nReturns:\n    Validation result",
          "is_public": true
        },
        {
          "name": "initialize_repository",
          "docstring": "Initialize a new Git repository.\n\nReturns:\n    True if successful, False otherwise",
          "is_public": true
        },
        {
          "name": "commit_phase_artifacts",
          "docstring": "Commit artifacts for a specific phase.\n\nArgs:\n    phase: Phase number\n    message: Commit message (auto-generated if not provided)\n    \nReturns:\n    True if successful, False otherwise",
          "is_public": true
        },
        {
          "name": "create_phase_branch",
          "docstring": "Create a branch for a specific phase.\n\nArgs:\n    phase: Phase number\n    \nReturns:\n    True if successful, False otherwise",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "Initialize AI Governor service.\n\nArgs:\n    project_root: Root directory of the project",
          "is_public": false
        },
        {
          "name": "validate",
          "docstring": "Validate AI Governor is available and configured.\n\nReturns:\n    Validation result",
          "is_public": true
        },
        {
          "name": "validate_project_config",
          "docstring": "Validate project configuration against AI Governor policies.\n\nArgs:\n    config: Project configuration\n    \nReturns:\n    Validation result",
          "is_public": true
        },
        {
          "name": "copy_master_rules",
          "docstring": "Copy master rules to the project.",
          "is_public": true
        },
        {
          "name": "create_workflow_config",
          "docstring": "Create workflow configuration for a phase.\n\nArgs:\n    phase: Phase number\n    \nReturns:\n    Workflow configuration",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "Initialize Policy DSL service.\n\nArgs:\n    project_root: Root directory of the project",
          "is_public": false
        },
        {
          "name": "validate",
          "docstring": "Validate Policy DSL is available and configured.",
          "is_public": true
        },
        {
          "name": "ensure_policy_bundle",
          "docstring": "Ensure policy templates are copied into the project workspace.",
          "is_public": true
        },
        {
          "name": "available_policies",
          "docstring": "Return the list of available policy identifiers.",
          "is_public": true
        },
        {
          "name": "load_policy",
          "docstring": "Load a specific policy by name.\n\nArgs:\n    policy_name: Name of the policy\n    \nReturns:\n    Policy configuration or None if not found",
          "is_public": true
        },
        {
          "name": "validate_compliance",
          "docstring": "Validate compliance against a specific policy.\n\nArgs:\n    compliance_type: Type of compliance (hipaa, soc2, pci, gdpr)\n    config: Configuration to validate\n    \nReturns:\n    Validation result",
          "is_public": true
        },
        {
          "name": "generate_compliance_report",
          "docstring": "Generate compliance report for a phase.\n\nArgs:\n    phase: Phase number\n    \nReturns:\n    Compliance report",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "ExternalServicesManager",
          "docstring": "Manages integration with external services across workflow phases."
        },
        {
          "name": "GitService",
          "docstring": "Git integration service for version control operations."
        },
        {
          "name": "AIGovernorService",
          "docstring": "AI Governor integration service for rule validation and workflow routing."
        },
        {
          "name": "PolicyDSLService",
          "docstring": "Policy DSL service for compliance and security policy validation."
        }
      ],
      "total_lines": 466,
      "code_lines": 346,
      "has_main_guard": false,
      "has_shebang": false,
      "is_executable": true
    },
    "scripts/gate_utils.py": {
      "name": "gate_utils",
      "path": "scripts/gate_utils.py",
      "size_bytes": 2026,
      "last_modified": "2025-10-19T09:37:20.135745",
      "description": "Shared utilities for protocol gate validation scripts.",
      "full_docstring": "Shared utilities for protocol gate validation scripts.",
      "functions": [
        {
          "name": "load_manifest_data",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "write_manifest",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "ManifestData",
          "docstring": ""
        }
      ],
      "total_lines": 67,
      "code_lines": 57,
      "has_main_guard": false,
      "has_shebang": false,
      "is_executable": false
    },
    "scripts/generate_client_project.py": {
      "name": "generate_client_project",
      "path": "scripts/generate_client_project.py",
      "size_bytes": 24734,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Client Project Generator - Main CLI Script",
      "full_docstring": "Client Project Generator - Main CLI Script\nGenerates industry-specific, compliance-ready client projects",
      "functions": [
        {
          "name": "parse_arguments",
          "docstring": "Parse command line arguments",
          "is_public": true
        },
        {
          "name": "interactive_mode",
          "docstring": "Fill in missing arguments through interactive prompts",
          "is_public": true
        },
        {
          "name": "check_dependencies",
          "docstring": "Check required CLI dependencies are available. Returns {'missing': [...], 'warnings': [...]}",
          "is_public": true
        },
        {
          "name": "display_project_summary",
          "docstring": "Display a summary of what will be generated",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point",
          "is_public": true
        },
        {
          "name": "prompt_choice",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 547,
      "code_lines": 397,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/generate_consistency_report.py": {
      "name": "generate_consistency_report",
      "path": "scripts/generate_consistency_report.py",
      "size_bytes": 32681,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Comprehensive Consistency Report Generator",
      "full_docstring": "Comprehensive Consistency Report Generator\n\nGenerates comprehensive consistency report across all protocols:\n- Protocol flow map\n- Directive consistency matrix\n- AI persona transitions\n- Instruction conflict report",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for consistency report generation.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "generate_consistency_report",
          "docstring": "Generate comprehensive consistency report.",
          "is_public": true
        },
        {
          "name": "_analyze_protocol",
          "docstring": "Analyze a single protocol for consistency.",
          "is_public": false
        },
        {
          "name": "_extract_steps",
          "docstring": "Extract steps from protocol content.",
          "is_public": false
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phases from protocol content.",
          "is_public": false
        },
        {
          "name": "_extract_directives",
          "docstring": "Extract directives from protocol content.",
          "is_public": false
        },
        {
          "name": "_extract_persona_info",
          "docstring": "Extract AI persona information.",
          "is_public": false
        },
        {
          "name": "_extract_gates",
          "docstring": "Extract gates from protocol content.",
          "is_public": false
        },
        {
          "name": "_extract_outputs",
          "docstring": "Extract outputs from protocol content.",
          "is_public": false
        },
        {
          "name": "_extract_handoff_instructions",
          "docstring": "Extract handoff instructions.",
          "is_public": false
        },
        {
          "name": "_extract_automation_hooks",
          "docstring": "Extract automation hooks.",
          "is_public": false
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around a match.",
          "is_public": false
        },
        {
          "name": "_generate_protocol_flow_map",
          "docstring": "Generate protocol flow map.",
          "is_public": false
        },
        {
          "name": "_generate_directive_matrix",
          "docstring": "Generate directive consistency matrix.",
          "is_public": false
        },
        {
          "name": "_generate_persona_transitions",
          "docstring": "Generate AI persona transition analysis.",
          "is_public": false
        },
        {
          "name": "_generate_conflict_report",
          "docstring": "Generate instruction conflict report.",
          "is_public": false
        },
        {
          "name": "_check_directive_conflict",
          "docstring": "Check if two directive contexts conflict.",
          "is_public": false
        },
        {
          "name": "_generate_handoff_alignment",
          "docstring": "Generate handoff alignment analysis.",
          "is_public": false
        },
        {
          "name": "_infer_next_inputs",
          "docstring": "Infer inputs for next protocol.",
          "is_public": false
        },
        {
          "name": "_calculate_alignment_score",
          "docstring": "Calculate alignment score between outputs and inputs.",
          "is_public": false
        },
        {
          "name": "_generate_execution_simulation",
          "docstring": "Generate execution simulation summary.",
          "is_public": false
        },
        {
          "name": "_calculate_consistency_score",
          "docstring": "Calculate overall consistency score.",
          "is_public": false
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate actionable recommendations.",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "ConsistencyReportGenerator",
          "docstring": "Generates comprehensive consistency reports."
        }
      ],
      "total_lines": 796,
      "code_lines": 628,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/generate_evidence_manifest.py": {
      "name": "generate_evidence_manifest",
      "path": "scripts/generate_evidence_manifest.py",
      "size_bytes": 4203,
      "last_modified": "2025-10-19T09:31:42.076477",
      "description": "Generate protocol evidence manifest stubs.",
      "full_docstring": "Generate protocol evidence manifest stubs.\n\nThis helper consumes the protocol automation inventory and produces\nschema-compliant manifests for a single protocol. The CLI is intentionally\nflexible so teams can seed artifacts and validator rows while Phase 2\nautomation is still under construction.",
      "functions": [
        {
          "name": "_parse_artifact",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_parse_validator",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 131,
      "code_lines": 112,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/generate_from_brief.py": {
      "name": "generate_from_brief",
      "path": "scripts/generate_from_brief.py",
      "size_bytes": 11345,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Brief-driven project orchestration that generates separate frontend and backend projects",
      "full_docstring": "Brief-driven project orchestration that generates separate frontend and backend projects\nwith curated Cursor rules per domain.\n\nUsage:\n  python scripts/generate_from_brief.py     --brief docs/briefs/project1/brief.md     --output-root ../_generated     --force --yes",
      "functions": [
        {
          "name": "write_rules_manifest",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "build_fe_manifest",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "build_be_manifest",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "run_argv",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 295,
      "code_lines": 245,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/generate_prd_assets.py": {
      "name": "generate_prd_assets",
      "path": "scripts/generate_prd_assets.py",
      "size_bytes": 8195,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Generate PRD and architecture summaries from planning artifacts.",
      "full_docstring": "Generate PRD and architecture summaries from planning artifacts.",
      "functions": [
        {
          "name": "iso_utc_now",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "read_plan_summary",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "load_tasks",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "extract_template_sections",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "build_task_section",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "render_prd",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "render_architecture",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 232,
      "code_lines": 179,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/generate_protocol_23_artifacts.py": {
      "name": "generate_protocol_23_artifacts",
      "path": "scripts/generate_protocol_23_artifacts.py",
      "size_bytes": 11741,
      "last_modified": "2025-10-19T11:16:26.839633",
      "description": "Protocol 23 Artifact Generator - Automated Script Governance",
      "full_docstring": "Protocol 23 Artifact Generator - Automated Script Governance\n\nGenerates required artifacts for Protocol 23 (Script Governance):\n1. Complete script index with metadata\n2. Documentation audit report\n3. Remediation backlog with prioritized actions",
      "functions": [
        {
          "name": "extract_script_metadata",
          "docstring": "Extract metadata from a Python script.",
          "is_public": true
        },
        {
          "name": "generate_script_index",
          "docstring": "Generate complete script index with metadata.",
          "is_public": true
        },
        {
          "name": "audit_documentation",
          "docstring": "Audit script documentation completeness.",
          "is_public": true
        },
        {
          "name": "generate_remediation_backlog",
          "docstring": "Generate prioritized remediation backlog.",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 348,
      "code_lines": 265,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/generate_protocol_scorecard.py": {
      "name": "generate_protocol_scorecard",
      "path": "scripts/generate_protocol_scorecard.py",
      "size_bytes": 3353,
      "last_modified": "2025-10-19T09:30:21.458489",
      "description": "Generate protocol scorecard metrics from automation inventory data.",
      "full_docstring": "Generate protocol scorecard metrics from automation inventory data.\n\nThe scorecard consumes the same protocol markdown set (01-23) and calculates\ncoverage and completeness indicators, emitting a consolidated JSON report that\ncan be published under ``documentation/`` for telemetry compliance.",
      "functions": [
        {
          "name": "_compute_score",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_summary",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 102,
      "code_lines": 82,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/generate_protocol_sequence.py": {
      "name": "generate_protocol_sequence",
      "path": "scripts/generate_protocol_sequence.py",
      "size_bytes": 7055,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Generate protocol command files based on brief analysis.",
      "full_docstring": "Generate protocol command files based on brief analysis.",
      "functions": [
        {
          "name": "load_analysis",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "load_registry",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "resolve_scripts",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "build_commands",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "filename",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "to_markdown",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "CommandArtifact",
          "docstring": ""
        }
      ],
      "total_lines": 179,
      "code_lines": 144,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/init_client_project.py": {
      "name": "init_client_project",
      "path": "scripts/init_client_project.py",
      "size_bytes": 2808,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "High-level orchestrator entry point for initializing a client project.",
      "full_docstring": "High-level orchestrator entry point for initializing a client project.",
      "functions": [
        {
          "name": "run_generate_from_brief",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 77,
      "code_lines": 61,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/inventory_protocols.py": {
      "name": "inventory_protocols",
      "path": "scripts/inventory_protocols.py",
      "size_bytes": 6909,
      "last_modified": "2025-10-19T09:28:51.450539",
      "description": "Protocol automation inventory CLI.",
      "full_docstring": "Protocol automation inventory CLI.\n\nThis tool scans protocol markdown files (01-23) under ``.cursor/ai-driven-workflow``\nfor ``python scripts/...`` references, verifies whether the referenced scripts exist\nin the repository ``scripts/`` directory, and emits JSON/CSV inventory reports.\n\nExample usage::\n\n    python scripts/inventory_protocols.py         --output-json documentation/protocol-script-inventory.json         --output-csv documentation/protocol-script-inventory.csv\n\nThe generated reports satisfy Wave 1 telemetry requirements by providing an\nauthoritative mapping between protocols and automation assets.",
      "functions": [
        {
          "name": "discover_protocol_files",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "extract_title",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "extract_scripts",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "build_inventory",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "write_json_report",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "write_csv_report",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "summarise",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "to_dict",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "ProtocolInventory",
          "docstring": ""
        }
      ],
      "total_lines": 210,
      "code_lines": 174,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/lane_executor.py": {
      "name": "lane_executor",
      "path": "scripts/lane_executor.py",
      "size_bytes": 3647,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Lane executor: iterate tasks by lane respecting dependencies and concurrency cap.",
      "full_docstring": "Lane executor: iterate tasks by lane respecting dependencies and concurrency cap.\n- Reads tasks.json (list or dict-of-lists)\n- Picks unblocked tasks up to --cap per lane\n- Prints execution order suggestion; DOES NOT run commands\n- Persists suggestion to .cursor/ai-governor/run-history/plan-<ts>.json\n- Records git commit if repo present\n\nUsage:\n  python scripts/lane_executor.py --lane backend --cap 3 --input tasks.json",
      "functions": [
        {
          "name": "_collect",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_filter_lane",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_ready",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_git_commit",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 111,
      "code_lines": 87,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/lifecycle_tasks.py": {
      "name": "lifecycle_tasks",
      "path": "scripts/lifecycle_tasks.py",
      "size_bytes": 12944,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Utility helpers for lifecycle planning tasks.",
      "full_docstring": "Utility helpers for lifecycle planning tasks.\n\nThe previous implementation inside ``plan_from_brief`` and\n``pre_lifecycle_plan`` duplicated a static set of backend and frontend\ntasks.  This module centralises the logic and makes it data-driven so\nlane contents can adapt to the parsed brief and workflow configuration.",
      "functions": [
        {
          "name": "_requires_backend",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_requires_frontend",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_requires_database",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_requires_auth",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_requires_compliance",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_features",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_project_type",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_normalise_capability",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_task",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_backend_api_tasks",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_frontend_feature_tasks",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "build_plan",
          "docstring": "Create backend/frontend lanes derived from the brief and config.",
          "is_public": true
        },
        {
          "name": "as_dict",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Serializable structure describing a work item in the plan."
        }
      ],
      "total_lines": 392,
      "code_lines": 344,
      "has_main_guard": false,
      "has_shebang": false,
      "is_executable": true
    },
    "scripts/migrate_evidence_data.py": {
      "name": "migrate_evidence_data",
      "path": "scripts/migrate_evidence_data.py",
      "size_bytes": 9264,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Migration script for historical evidence data.",
      "full_docstring": "Migration script for historical evidence data.\n\nThis script scans for legacy evidence files and migrates them to the unified format,\nensuring backward compatibility and data preservation.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "Initialize the migrator.\n\nArgs:\n    base_path: Base directory to scan for evidence files\n    dry_run: If True, only analyze without making changes",
          "is_public": false
        },
        {
          "name": "find_evidence_files",
          "docstring": "Find all evidence files in the project.\n\nReturns:\n    List of paths to evidence files",
          "is_public": true
        },
        {
          "name": "analyze_evidence_file",
          "docstring": "Analyze an evidence file to determine its format and content.\n\nArgs:\n    file_path: Path to the evidence file\n\nReturns:\n    Analysis results",
          "is_public": true
        },
        {
          "name": "migrate_evidence_file",
          "docstring": "Migrate a single evidence file from legacy to unified format.\n\nArgs:\n    file_path: Path to the evidence file\n\nReturns:\n    True if migration successful, False otherwise",
          "is_public": true
        },
        {
          "name": "_extract_project_name",
          "docstring": "Extract project name from file path or use default.",
          "is_public": false
        },
        {
          "name": "_extract_workflow_version",
          "docstring": "Extract workflow version from file path or use default.",
          "is_public": false
        },
        {
          "name": "run_migration",
          "docstring": "Run the complete migration process.\n\nReturns:\n    Migration statistics",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "EvidenceMigrator",
          "docstring": "Migrates historical evidence data from legacy to unified format."
        }
      ],
      "total_lines": 279,
      "code_lines": 204,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/normalize_project_rules.py": {
      "name": "normalize_project_rules",
      "path": "scripts/normalize_project_rules.py",
      "size_bytes": 4429,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Normalize frontmatter for project rules under .cursor/rules/project-rules/**.mdc",
      "full_docstring": "Normalize frontmatter for project rules under .cursor/rules/project-rules/**.mdc\nRules:\n- description: human guidance text; remove TAGS/TRIGGERS/SCOPE patterns\n- globs: comma-separated patterns with no quotes, no spaces (e.g., **/*.ts,**/*.tsx)\n- alwaysApply: false (enforced)\n- Do not touch master/common rules; only project-rules subtree\n\nUsage:\n  python scripts/normalize_project_rules.py --dry-run\n  python scripts/normalize_project_rules.py --apply",
      "functions": [
        {
          "name": "normalize_frontmatter",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 132,
      "code_lines": 100,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/optimize_project_rules.py": {
      "name": "optimize_project_rules",
      "path": "scripts/optimize_project_rules.py",
      "size_bytes": 9060,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "No description available",
      "full_docstring": "No description available",
      "functions": [
        {
          "name": "parse_frontmatter",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "build_frontmatter",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "categorize",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "ensure_frontmatter",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "process_file",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "write_indexes_and_report",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 250,
      "code_lines": 217,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/plan_from_brief.py": {
      "name": "plan_from_brief",
      "path": "scripts/plan_from_brief.py",
      "size_bytes": 2417,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Generate PLAN.md and tasks.json from a brief.md.",
      "full_docstring": "Generate PLAN.md and tasks.json from a brief.md.\nNo deploy. No code edits. Outputs are artifacts only.",
      "functions": [
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "render_plan_md",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 66,
      "code_lines": 50,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/pre_lifecycle_plan.py": {
      "name": "pre_lifecycle_plan",
      "path": "scripts/pre_lifecycle_plan.py",
      "size_bytes": 35349,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Pre-lifecycle roadmap generator with dynamic gating and validation.",
      "full_docstring": "Pre-lifecycle roadmap generator with dynamic gating and validation.",
      "functions": [
        {
          "name": "_artifact",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "environment_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "planning_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "stack_preflight_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "generation_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "artifact_validation_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "frontend_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "backend_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "integration_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "quality_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "developer_experience_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "compliance_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "cicd_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "deploy_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "observability_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "final_delivery_stage",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "build_steps",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "load_config",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "_parse_frontmatter",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_normalise_metadata",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "load_brief_metadata",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "merge_configuration",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "ensure_brief_exists",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "format_lane",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "print_steps",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "script_path",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "display_path",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "_is_missing",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "resolved",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "industry",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "project_type",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "frontend_stack",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "backend_stack",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "database_stack",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "auth_provider",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "deploy_target",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "compliance_labels",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "has_frontend",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "has_backend",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "has_database",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "requires_auth",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "requires_compliance",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "requires_deploy",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "is_active",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "evaluate",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "is_active",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "PlanContext",
          "docstring": ""
        },
        {
          "name": "PlanItem",
          "docstring": ""
        },
        {
          "name": "PlanStep",
          "docstring": ""
        }
      ],
      "total_lines": 932,
      "code_lines": 790,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/project_generator_orchestration.py": {
      "name": "project_generator_orchestration",
      "path": "scripts/project_generator_orchestration.py",
      "size_bytes": 9059,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Unified project generator adapter.",
      "full_docstring": "Unified project generator adapter.\n\nThis module exposes a small adapter that wires the legacy\n``project_generator`` package into the Week 2 unified workflow.  The\nadapter normalises configuration, ensures the unified template registry\nis always used, and returns light-weight dataclasses that are convenient\nfor validation prompts and tests.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "generate",
          "docstring": "Generate a project using the unified configuration interface.",
          "is_public": true
        },
        {
          "name": "validate",
          "docstring": "Validate the stack configuration against the legacy validator.",
          "is_public": true
        },
        {
          "name": "get_templates",
          "docstring": "Expose templates from the unified registry as simple objects.",
          "is_public": true
        },
        {
          "name": "_build_args",
          "docstring": "Create an ``argparse.Namespace`` mirroring CLI inputs.",
          "is_public": false
        },
        {
          "name": "_get_generator_class",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_get_validator_class",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_create_industry_config",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_load_symbol",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_ensure_project_generator_package",
          "docstring": "",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "ProjectGenerationResult",
          "docstring": "Result returned after calling :meth:`UnifiedProjectGenerator.generate`."
        },
        {
          "name": "ProjectValidationResult",
          "docstring": "Result returned from :meth:`UnifiedProjectGenerator.validate`."
        },
        {
          "name": "AvailableTemplate",
          "docstring": "Small wrapper exposing template metadata via simple attributes."
        },
        {
          "name": "UnifiedProjectGenerator",
          "docstring": "Bridge between the unified workflow and the legacy generator."
        }
      ],
      "total_lines": 260,
      "code_lines": 205,
      "has_main_guard": false,
      "has_shebang": false,
      "is_executable": true
    },
    "scripts/quality_gates.py": {
      "name": "quality_gates",
      "path": "scripts/quality_gates.py",
      "size_bytes": 19351,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Quality Gates for Unified Developer Workflow",
      "full_docstring": "Quality Gates for Unified Developer Workflow\n\nImplements comprehensive quality validation across all layers with\nspecialized protocols and unified reporting.",
      "functions": [
        {
          "name": "cli",
          "docstring": "Quality Gates CLI for Unified Developer Workflow",
          "is_public": true
        },
        {
          "name": "audit",
          "docstring": "Execute single quality gate",
          "is_public": true
        },
        {
          "name": "comprehensive",
          "docstring": "Execute comprehensive quality audit",
          "is_public": true
        },
        {
          "name": "interactive",
          "docstring": "Execute interactive quality audit",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_load_review_protocol",
          "docstring": "Load review protocol based on mode.",
          "is_public": false
        },
        {
          "name": "_execute_quality_gate",
          "docstring": "Execute quality gate based on mode",
          "is_public": false
        },
        {
          "name": "_generate_findings",
          "docstring": "Generate findings based on mode and context",
          "is_public": false
        },
        {
          "name": "_evaluate_compliance",
          "docstring": "Evaluate compliance standards from context.",
          "is_public": false
        },
        {
          "name": "_generate_compliance_evidence",
          "docstring": "Generate compliance assets and log them as evidence.",
          "is_public": false
        },
        {
          "name": "_calculate_score",
          "docstring": "Calculate quality score based on findings",
          "is_public": false
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate recommendations based on findings and mode",
          "is_public": false
        },
        {
          "name": "execute_quality_gate",
          "docstring": "Execute single quality gate",
          "is_public": true
        },
        {
          "name": "execute_comprehensive_audit",
          "docstring": "Execute comprehensive audit across all layers",
          "is_public": true
        },
        {
          "name": "execute_interactive_audit",
          "docstring": "Execute interactive audit with user selection",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "QualityGates",
          "docstring": "Quality gates implementation for unified workflow"
        }
      ],
      "total_lines": 543,
      "code_lines": 403,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/real_external_validation.py": {
      "name": "real_external_validation",
      "path": "scripts/real_external_validation.py",
      "size_bytes": 3413,
      "last_modified": "2025-10-18T16:11:25.794508",
      "description": "Real External Compliance Checking",
      "full_docstring": "Real External Compliance Checking\nUses actual external APIs for validation",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "check_grammar_external",
          "docstring": "Real grammar checking via external API",
          "is_public": true
        },
        {
          "name": "check_readability_external",
          "docstring": "Real readability checking via external API",
          "is_public": true
        },
        {
          "name": "check_compliance_external",
          "docstring": "Real compliance checking via external API",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "RealComplianceChecker",
          "docstring": ""
        }
      ],
      "total_lines": 94,
      "code_lines": 73,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/real_monitoring_dashboard.py": {
      "name": "real_monitoring_dashboard",
      "path": "scripts/real_monitoring_dashboard.py",
      "size_bytes": 4610,
      "last_modified": "2025-10-18T15:26:05.181124",
      "description": "Real Live Monitoring Dashboard",
      "full_docstring": "Real Live Monitoring Dashboard\nShows real-time validation metrics",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "get_real_time_metrics",
          "docstring": "Get real-time metrics from external APIs",
          "is_public": true
        },
        {
          "name": "create_dashboard",
          "docstring": "Create real-time monitoring dashboard",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "RealMonitoringDashboard",
          "docstring": ""
        }
      ],
      "total_lines": 115,
      "code_lines": 86,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/real_third_party_validator.py": {
      "name": "real_third_party_validator",
      "path": "scripts/real_third_party_validator.py",
      "size_bytes": 5543,
      "last_modified": "2025-10-18T15:25:58.372124",
      "description": "Real Third-Party Tools Integration",
      "full_docstring": "Real Third-Party Tools Integration\nUses actual external tools and services",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "check_tools_availability",
          "docstring": "Check which external tools are available",
          "is_public": true
        },
        {
          "name": "run_languagetool",
          "docstring": "Run real LanguageTool grammar checking",
          "is_public": true
        },
        {
          "name": "run_security_scan",
          "docstring": "Run real security scanning",
          "is_public": true
        },
        {
          "name": "run_vulnerability_scan",
          "docstring": "Run real vulnerability scanning",
          "is_public": true
        },
        {
          "name": "check_external_apis",
          "docstring": "Check external APIs for validation",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "RealThirdPartyValidator",
          "docstring": ""
        }
      ],
      "total_lines": 157,
      "code_lines": 121,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/restore_workflows.py": {
      "name": "restore_workflows",
      "path": "scripts/restore_workflows.py",
      "size_bytes": 2377,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "No description available",
      "full_docstring": "No description available",
      "functions": [
        {
          "name": "_is_safe_member",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "extract",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "verify",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "write_proof",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 82,
      "code_lines": 64,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/retrospective_evidence_report.py": {
      "name": "retrospective_evidence_report",
      "path": "scripts/retrospective_evidence_report.py",
      "size_bytes": 435,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Wrapper to run evidence_report for retrospective workflows.",
      "full_docstring": "Wrapper to run evidence_report for retrospective workflows.",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 18,
      "code_lines": 12,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/retrospective_rules_audit.py": {
      "name": "retrospective_rules_audit",
      "path": "scripts/retrospective_rules_audit.py",
      "size_bytes": 439,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Wrapper to run rules_audit_quick for retrospective workflows.",
      "full_docstring": "Wrapper to run rules_audit_quick for retrospective workflows.",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 18,
      "code_lines": 12,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/review_protocol_loader.py": {
      "name": "review_protocol_loader",
      "path": "scripts/review_protocol_loader.py",
      "size_bytes": 4072,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Utilities for loading and parsing review protocol playbooks.",
      "full_docstring": "Utilities for loading and parsing review protocol playbooks.",
      "functions": [
        {
          "name": "to_dict",
          "docstring": "Convert the protocol into a serialisable dictionary.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "available_protocols",
          "docstring": "List available protocol slugs without file extensions.",
          "is_public": true
        },
        {
          "name": "load",
          "docstring": "Load a review protocol by slug or filename.",
          "is_public": true
        },
        {
          "name": "_extract_title",
          "docstring": "Extract the main title from markdown content.",
          "is_public": false
        },
        {
          "name": "_parse_sections",
          "docstring": "Parse markdown into sections grouped by headings.",
          "is_public": false
        },
        {
          "name": "_extract_checklist",
          "docstring": "Extract checklist items from section content.",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "ReviewProtocol",
          "docstring": "Structured representation of a review protocol markdown file."
        },
        {
          "name": "ReviewProtocolLoader",
          "docstring": "Load review protocol markdown files from the workflow repository."
        }
      ],
      "total_lines": 120,
      "code_lines": 100,
      "has_main_guard": false,
      "has_shebang": false,
      "is_executable": true
    },
    "scripts/router_benchmark.py": {
      "name": "router_benchmark",
      "path": "scripts/router_benchmark.py",
      "size_bytes": 1962,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Benchmark the router route_decision with and without cache.",
      "full_docstring": "Benchmark the router route_decision with and without cache.\n\nIt imports the router module twice (cache off/on) and times repeated decisions.",
      "functions": [
        {
          "name": "load_router",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "bench",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 68,
      "code_lines": 46,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/rules_audit_quick.py": {
      "name": "rules_audit_quick",
      "path": "scripts/rules_audit_quick.py",
      "size_bytes": 6770,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Lightweight quality audit for project rule documents.",
      "full_docstring": "Lightweight quality audit for project rule documents.",
      "functions": [
        {
          "name": "_read_rule",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_check_body_sections",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_collect_glob_overlaps",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "audit_rules",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "write_report",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "RuleIssue",
          "docstring": ""
        },
        {
          "name": "GlobOverlap",
          "docstring": ""
        },
        {
          "name": "AuditSummary",
          "docstring": ""
        }
      ],
      "total_lines": 195,
      "code_lines": 156,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/run_generate_rules.py": {
      "name": "run_generate_rules",
      "path": "scripts/run_generate_rules.py",
      "size_bytes": 5652,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Lightweight rules generator that follows .cursor/ai-driven-workflow/00-generate-rules.md Generation Phase.",
      "full_docstring": "Lightweight rules generator that follows .cursor/ai-driven-workflow/00-generate-rules.md Generation Phase.\n\n- Detect basic stack signals in the generated project directory\n- Emit focused project rules under <project>/.cursor/rules/project-rules/\n  without overwriting existing files unless --overwrite is passed",
      "functions": [
        {
          "name": "detect_stack",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "ensure_rule",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "build_rule",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "generate_rules",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 139,
      "code_lines": 111,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/run_protocol_gates.py": {
      "name": "run_protocol_gates",
      "path": "scripts/run_protocol_gates.py",
      "size_bytes": 3234,
      "last_modified": "2025-10-19T09:59:07.239806",
      "description": "Configuration-driven protocol gate runner.",
      "full_docstring": "Configuration-driven protocol gate runner.\n\nThis prototype loads a YAML descriptor mapping validation steps for a protocol,\nexecutes available scripts, captures results, and writes an evidence manifest\nfollowing ``documentation/evidence-manifest.schema.json``.",
      "functions": [
        {
          "name": "_run_command",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_load_protocol_config",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_execute_protocol",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 105,
      "code_lines": 83,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/run_workflow.py": {
      "name": "run_workflow",
      "path": "scripts/run_workflow.py",
      "size_bytes": 2106,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "CLI entry point for executing the workflow automation pipeline.",
      "full_docstring": "CLI entry point for executing the workflow automation pipeline.",
      "functions": [
        {
          "name": "configure_logging",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "load_config",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "run",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 70,
      "code_lines": 55,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/scaffold_briefs.py": {
      "name": "scaffold_briefs",
      "path": "scripts/scaffold_briefs.py",
      "size_bytes": 1344,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Create minimal docs/briefs/<proj>/* scaffolds to unblock compliance checks.",
      "full_docstring": "Create minimal docs/briefs/<proj>/* scaffolds to unblock compliance checks.",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 54,
      "code_lines": 33,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/scaffold_phase_artifacts.py": {
      "name": "scaffold_phase_artifacts",
      "path": "scripts/scaffold_phase_artifacts.py",
      "size_bytes": 3051,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "No description available",
      "full_docstring": "No description available",
      "functions": [
        {
          "name": "parse_brief",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "ensure",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "scaffold_phase_1",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "scaffold_phase_2",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 110,
      "code_lines": 90,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/scan_deps.py": {
      "name": "scan_deps",
      "path": "scripts/scan_deps.py",
      "size_bytes": 3070,
      "last_modified": "2025-10-18T15:30:05.356688",
      "description": "Aggregate dependency vulnerability counts into metrics/deps.json.",
      "full_docstring": "Aggregate dependency vulnerability counts into metrics/deps.json.\n- Tries pip-audit (Python) and npm audit (Node) if available\n- Produces: metrics/deps.json = {\"critical\": int, \"high\": int}\n- Never fails if tools are missing; prints hints instead\n\nUsage:\n  python scripts/scan_deps.py",
      "functions": [
        {
          "name": "_run",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "python_counts",
          "docstring": "Return (critical, high) for Python deps using pip-audit if present.",
          "is_public": true
        },
        {
          "name": "node_counts",
          "docstring": "Return (critical, high) for Node deps via `npm audit --json` if package.json exists.",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 98,
      "code_lines": 83,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/score_risks.py": {
      "name": "score_risks",
      "path": "scripts/score_risks.py",
      "size_bytes": 15300,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Risk Scoring Script",
      "full_docstring": "Risk Scoring Script\n\nAutomatically scores risks by impact and likelihood according to Protocol 00 standards.\nGenerates risk matrix and prioritization recommendations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for risk scoring.",
          "is_public": true
        },
        {
          "name": "score",
          "docstring": "Calculate risk score (impact * likelihood).",
          "is_public": true
        },
        {
          "name": "level",
          "docstring": "Determine overall risk level.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "score_risks_from_brief",
          "docstring": "Extract and score risks from a project brief.",
          "is_public": true
        },
        {
          "name": "_extract_risks_section",
          "docstring": "Extract the risks section from brief content.",
          "is_public": false
        },
        {
          "name": "_parse_risks",
          "docstring": "Parse individual risks from the risks section.",
          "is_public": false
        },
        {
          "name": "_score_individual_risk",
          "docstring": "Score an individual risk based on its text content.",
          "is_public": false
        },
        {
          "name": "_determine_level",
          "docstring": "Determine risk level based on keywords.",
          "is_public": false
        },
        {
          "name": "_determine_category",
          "docstring": "Determine risk category based on content.",
          "is_public": false
        },
        {
          "name": "_extract_mitigation",
          "docstring": "Extract mitigation strategy if present.",
          "is_public": false
        },
        {
          "name": "_generate_risk_matrix",
          "docstring": "Generate risk matrix visualization data.",
          "is_public": false
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate risk management recommendations.",
          "is_public": false
        },
        {
          "name": "_generate_summary",
          "docstring": "Generate risk summary statistics.",
          "is_public": false
        },
        {
          "name": "_risk_to_dict",
          "docstring": "Convert Risk object to dictionary.",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "RiskLevel",
          "docstring": "Risk level enumeration."
        },
        {
          "name": "Risk",
          "docstring": "Risk data structure."
        },
        {
          "name": "RiskScorer",
          "docstring": "Automatically scores risks from project briefs."
        }
      ],
      "total_lines": 421,
      "code_lines": 328,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/select_stacks.py": {
      "name": "select_stacks",
      "path": "scripts/select_stacks.py",
      "size_bytes": 27995,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "No description available",
      "full_docstring": "No description available",
      "functions": [
        {
          "name": "_read_text",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_replace_tokens",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_find_readme",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_extract_paragraph",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_extract_features",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_summarize_template",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_write_summary_file",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_excerpt",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_parse_version_raw",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_cmp_version",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_parse_requirement",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_satisfies",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_max_requirement",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_read_json",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_manifest_for",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_pkg_engines_node_for_frontend",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_collect_engine_substitutions",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_current_versions",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "record",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_pairs",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_json_text",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "run",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "Selection",
          "docstring": ""
        }
      ],
      "total_lines": 756,
      "code_lines": 629,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/simulate_protocol_execution.py": {
      "name": "simulate_protocol_execution",
      "path": "scripts/simulate_protocol_execution.py",
      "size_bytes": 25432,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Protocol Execution Simulation Script",
      "full_docstring": "Protocol Execution Simulation Script\n\nSimulates AI execution of protocols to detect runtime issues:\n- Happy path simulation\n- Error path simulation\n- Edge case simulation",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for protocol execution simulation.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "simulate_protocol_execution",
          "docstring": "Run comprehensive protocol execution simulation.",
          "is_public": true
        },
        {
          "name": "_simulate_happy_path",
          "docstring": "Simulate successful execution of protocol.",
          "is_public": false
        },
        {
          "name": "_simulate_error_path",
          "docstring": "Simulate error scenarios in protocol execution.",
          "is_public": false
        },
        {
          "name": "_simulate_edge_cases",
          "docstring": "Simulate edge cases in protocol execution.",
          "is_public": false
        },
        {
          "name": "_extract_simulation_steps",
          "docstring": "Extract steps for simulation.",
          "is_public": false
        },
        {
          "name": "_extract_step_dependencies",
          "docstring": "Extract dependencies from step content.",
          "is_public": false
        },
        {
          "name": "_extract_step_outputs",
          "docstring": "Extract outputs from step content.",
          "is_public": false
        },
        {
          "name": "_extract_step_gates",
          "docstring": "Extract gates from step content.",
          "is_public": false
        },
        {
          "name": "_extract_gates",
          "docstring": "Extract all gates from protocol content.",
          "is_public": false
        },
        {
          "name": "_check_dependencies",
          "docstring": "Check if step dependencies are satisfied.",
          "is_public": false
        },
        {
          "name": "_simulate_step_execution",
          "docstring": "Simulate execution of a step.",
          "is_public": false
        },
        {
          "name": "_simulate_gate_execution",
          "docstring": "Simulate gate execution.",
          "is_public": false
        },
        {
          "name": "_check_error_handling",
          "docstring": "Check if step has error handling.",
          "is_public": false
        },
        {
          "name": "_check_gate_fallback",
          "docstring": "Check if gate has fallback procedures.",
          "is_public": false
        },
        {
          "name": "_check_empty_input_handling",
          "docstring": "Check if protocol handles empty inputs.",
          "is_public": false
        },
        {
          "name": "_check_max_limit_handling",
          "docstring": "Check if protocol handles maximum limits.",
          "is_public": false
        },
        {
          "name": "_check_invalid_format_handling",
          "docstring": "Check if protocol handles invalid formats.",
          "is_public": false
        },
        {
          "name": "_check_optional_data_handling",
          "docstring": "Check if protocol handles missing optional data.",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "SimulationStatus",
          "docstring": "Simulation execution status."
        },
        {
          "name": "SimulationStep",
          "docstring": "Represents a simulation step."
        },
        {
          "name": "SimulationResult",
          "docstring": "Represents simulation result for a protocol."
        },
        {
          "name": "ProtocolExecutionSimulator",
          "docstring": "Simulates AI execution of protocols."
        }
      ],
      "total_lines": 672,
      "code_lines": 518,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/standardize_frontmatter.py": {
      "name": "standardize_frontmatter",
      "path": "scripts/standardize_frontmatter.py",
      "size_bytes": 9009,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Standardize frontmatter for all .mdc files in project-rules according to Cursor 2025 specs.",
      "full_docstring": "Standardize frontmatter for all .mdc files in project-rules according to Cursor 2025 specs.\nOnly modifies frontmatter; preserves rule content.",
      "functions": [
        {
          "name": "parse_existing_frontmatter",
          "docstring": "Parse existing frontmatter and return (metadata, body)",
          "is_public": true
        },
        {
          "name": "infer_globs_from_content",
          "docstring": "Infer appropriate globs pattern from rule content and filename",
          "is_public": true
        },
        {
          "name": "infer_always_apply",
          "docstring": "Determine if rule should be alwaysApply based on filename and content",
          "is_public": true
        },
        {
          "name": "generate_description",
          "docstring": "Generate appropriate description if missing or improve existing one",
          "is_public": true
        },
        {
          "name": "standardize_frontmatter_file",
          "docstring": "Standardize frontmatter for a single .mdc file",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main execution",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 240,
      "code_lines": 167,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/sync_from_scaffold.py": {
      "name": "sync_from_scaffold",
      "path": "scripts/sync_from_scaffold.py",
      "size_bytes": 7033,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Scan scaffold to propose task updates (add/complete) and optionally apply.",
      "full_docstring": "Scan scaffold to propose task updates (add/complete) and optionally apply.\n- Detects: Next.js pages (app/*, pages/*), FastAPI routers (APIRouter path ops), DB migrations, tests\n- Respects excludes via CLI\n\nUsage:\n  python scripts/sync_from_scaffold.py --input tasks.json --output tasks.json     --exclude \"node_modules, .git, .venv\" [--apply]\n\nBehavior:\n  - Without --apply: prints a diff plan (add/complete) and exits 0\n  - With --apply: updates tasks.json accordingly\nExit codes: 0 success; 2 invalid input",
      "functions": [
        {
          "name": "_walk_files",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_collect_tasks",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_index_by_id",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_detect",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_matches_fastapi",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 215,
      "code_lines": 167,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/system_instruction_formatter.py": {
      "name": "system_instruction_formatter",
      "path": "scripts/system_instruction_formatter.py",
      "size_bytes": 18566,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "System Instruction Formatter Tool (Advanced)",
      "full_docstring": "System Instruction Formatter Tool (Advanced)\nEnd-to-end protocol to author, validate, conflict-resolve, version, test, and operationalize system instructions",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for CLI usage",
          "is_public": true
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "classify_instruction_type",
          "docstring": "Classify instruction type based on content analysis",
          "is_public": true
        },
        {
          "name": "extract_yaml_frontmatter",
          "docstring": "Extract YAML frontmatter from content",
          "is_public": true
        },
        {
          "name": "normalize_directives",
          "docstring": "Normalize directive tags to canonical set",
          "is_public": true
        },
        {
          "name": "detect_conflicts",
          "docstring": "Detect directive conflicts in content",
          "is_public": true
        },
        {
          "name": "validate_structure",
          "docstring": "Validate instruction structure",
          "is_public": true
        },
        {
          "name": "apply_minimal_profile",
          "docstring": "Apply minimal profile based on instruction type",
          "is_public": true
        },
        {
          "name": "format_instruction",
          "docstring": "Format instruction using canonical structure",
          "is_public": true
        },
        {
          "name": "generate_applicability_report",
          "docstring": "Generate applicability report",
          "is_public": true
        },
        {
          "name": "validate_instruction",
          "docstring": "Validate instruction without formatting",
          "is_public": true
        },
        {
          "name": "resolve_conflicts",
          "docstring": "Resolve directive conflicts",
          "is_public": true
        },
        {
          "name": "generate_test_harness",
          "docstring": "Generate test harness for instruction type",
          "is_public": true
        },
        {
          "name": "format_phase_protocol",
          "docstring": "Format phase protocol using System Instruction Formatter",
          "is_public": true
        },
        {
          "name": "add_bootstrap_enhancements",
          "docstring": "Add bootstrap-specific enhancements",
          "is_public": true
        },
        {
          "name": "add_quality_audit_enhancements",
          "docstring": "Add quality audit-specific enhancements",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "InstructionType",
          "docstring": "Instruction type classification"
        },
        {
          "name": "DirectiveTag",
          "docstring": "Canonical directive tags"
        },
        {
          "name": "InstructionMetadata",
          "docstring": "Instruction metadata structure"
        },
        {
          "name": "ValidationResult",
          "docstring": "Validation result structure"
        },
        {
          "name": "SystemInstructionFormatter",
          "docstring": "System Instruction Formatter Specialist"
        }
      ],
      "total_lines": 470,
      "code_lines": 334,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/test_circular_validation.py": {
      "name": "test_circular_validation",
      "path": "scripts/test_circular_validation.py",
      "size_bytes": 3193,
      "last_modified": "2025-10-18T05:43:00.932785",
      "description": "Circular Validation Test Script",
      "full_docstring": "Circular Validation Test Script\nTests protocol \u2192 meta-analysis \u2192 validation circular flow",
      "functions": [
        {
          "name": "test_circular_validation",
          "docstring": "Test circular validation for a single protocol",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 89,
      "code_lines": 70,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/test_gate_validators.py": {
      "name": "test_gate_validators",
      "path": "scripts/test_gate_validators.py",
      "size_bytes": 10931,
      "last_modified": "2025-10-19T09:55:16.050599",
      "description": "Regression tests for protocol gate validators.",
      "full_docstring": "Regression tests for protocol gate validators.\n\nTests dynamic loading, validator execution, and manifest generation.",
      "functions": [
        {
          "name": "test_gate_01_jobpost_validator_missing_file",
          "docstring": "Test jobpost validator with missing file.",
          "is_public": true
        },
        {
          "name": "test_gate_01_jobpost_validator_valid_data",
          "docstring": "Test jobpost validator with valid data.",
          "is_public": true
        },
        {
          "name": "test_gate_01_tone_validator_low_confidence",
          "docstring": "Test tone validator with low confidence.",
          "is_public": true
        },
        {
          "name": "test_gate_01_structure_validator_with_sections",
          "docstring": "Test structure validator with required sections.",
          "is_public": true
        },
        {
          "name": "test_gate_02_objectives_validator",
          "docstring": "Test objectives validator with valid content.",
          "is_public": true
        },
        {
          "name": "test_gate_02_requirements_validator",
          "docstring": "Test requirements validator with MVP and backlog.",
          "is_public": true
        },
        {
          "name": "test_gate_03_discovery_validator_missing_artifacts",
          "docstring": "Test discovery validator with missing artifacts.",
          "is_public": true
        },
        {
          "name": "test_gate_03_approvals_validator_valid",
          "docstring": "Test approvals validator with valid record.",
          "is_public": true
        },
        {
          "name": "test_run_protocol_gates_config_loading",
          "docstring": "Test gate runner can load configuration.",
          "is_public": true
        },
        {
          "name": "test_gate_utils_manifest_generation",
          "docstring": "Test manifest generation utilities.",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "TestProtocol01Validators",
          "docstring": "Test Protocol 01 gate validators."
        },
        {
          "name": "TestProtocol02Validators",
          "docstring": "Test Protocol 02 gate validators."
        },
        {
          "name": "TestProtocol03Validators",
          "docstring": "Test Protocol 03 gate validators."
        },
        {
          "name": "TestGateRunner",
          "docstring": "Test the gate runner framework."
        }
      ],
      "total_lines": 328,
      "code_lines": 243,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/test_policy_decisions.py": {
      "name": "test_policy_decisions",
      "path": "scripts/test_policy_decisions.py",
      "size_bytes": 8234,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Policy router regression test runner.",
      "full_docstring": "Policy router regression test runner.\n\nThis utility discovers YAML based policy decision fixtures and executes them\nagainst the workflow router implementation.  The original version of the script\nwas tightly coupled to the repository layout, repeatedly re-opened YAML files,\nand printed ad-hoc output which made automated verification difficult.  The\nreworked implementation provides a structured CLI, deterministic discovery,\nand machine-readable summaries so the test harness can gate CI reliably.",
      "functions": [
        {
          "name": "_load_router",
          "docstring": "Dynamically import the router module from ``router_path``.\n\nThe loader mirrors the previous behaviour but adds defensive error handling\nso callers receive clear messages when the router cannot be imported.",
          "is_public": false
        },
        {
          "name": "_iter_yaml_documents",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_normalize_case",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_discover_case_files",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_load_cases",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_run_case",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "PolicyCase",
          "docstring": "Represents a single policy regression scenario."
        },
        {
          "name": "CaseResult",
          "docstring": "Execution outcome for a :class:`PolicyCase`."
        }
      ],
      "total_lines": 243,
      "code_lines": 197,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/tone_mapper.py": {
      "name": "tone_mapper",
      "path": "scripts/tone_mapper.py",
      "size_bytes": 3827,
      "last_modified": "2025-10-18T16:11:25.794508",
      "description": "Real Tone Analysis Script",
      "full_docstring": "Real Tone Analysis Script\nActually analyzes text tone using NLP",
      "functions": [
        {
          "name": "analyze_tone",
          "docstring": "Actually analyze text tone using NLP",
          "is_public": true
        },
        {
          "name": "classify_tone",
          "docstring": "Actually classify tone based on content analysis",
          "is_public": true
        },
        {
          "name": "calculate_confidence",
          "docstring": "Actually calculate confidence based on content analysis",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 110,
      "code_lines": 75,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/trigger_plan.py": {
      "name": "trigger_plan",
      "path": "scripts/trigger_plan.py",
      "size_bytes": 7577,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "No description available",
      "full_docstring": "No description available",
      "functions": [
        {
          "name": "load_policies",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "match_policy",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "choose_stack",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "build_commands",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "print_plan",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 191,
      "code_lines": 161,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/update_task_state.py": {
      "name": "update_task_state",
      "path": "scripts/update_task_state.py",
      "size_bytes": 3665,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Update a task's state by id in tasks.json with validation and log note.",
      "full_docstring": "Update a task's state by id in tasks.json with validation and log note.\n\nUsage:\n  python scripts/update_task_state.py --id FE-DSN --state completed [--note \"done\"] [--input tasks.json] [--output tasks.json]\n\nExit codes:\n  0 success; 2 invalid input; 3 not found or no-op",
      "functions": [
        {
          "name": "_collect",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_apply",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 104,
      "code_lines": 86,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validate_ai_directives.py": {
      "name": "validate_ai_directives",
      "path": "scripts/validate_ai_directives.py",
      "size_bytes": 22136,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "AI Directive Consistency Validation Script",
      "full_docstring": "AI Directive Consistency Validation Script\n\nEnsures AI behavior directives are consistent and non-conflicting:\n- Directive tag consistency\n- AI persona alignment\n- Gate criteria consistency\n- Communication pattern validation",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for AI directive validation.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "validate_ai_directives",
          "docstring": "Run comprehensive AI directive validation across all protocols.",
          "is_public": true
        },
        {
          "name": "_validate_single_protocol",
          "docstring": "Validate AI directives in a single protocol.",
          "is_public": false
        },
        {
          "name": "_validate_orchestrator_instruction",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around a match.",
          "is_public": false
        },
        {
          "name": "_extract_persona_info",
          "docstring": "Extract AI persona information from protocol.",
          "is_public": false
        },
        {
          "name": "_extract_communication_patterns",
          "docstring": "Extract communication patterns from protocol.",
          "is_public": false
        },
        {
          "name": "_extract_gate_criteria",
          "docstring": "Extract gate criteria from protocol.",
          "is_public": false
        },
        {
          "name": "_validate_directive_consistency",
          "docstring": "Validate directive consistency within protocol.",
          "is_public": false
        },
        {
          "name": "_validate_persona_consistency",
          "docstring": "Validate persona consistency within protocol.",
          "is_public": false
        },
        {
          "name": "_validate_communication_consistency",
          "docstring": "Validate communication pattern consistency within protocol.",
          "is_public": false
        },
        {
          "name": "_analyze_directive_consistency",
          "docstring": "Analyze directive consistency across all protocols.",
          "is_public": false
        },
        {
          "name": "_analyze_persona_consistency",
          "docstring": "Analyze persona consistency across all protocols.",
          "is_public": false
        },
        {
          "name": "_analyze_communication_consistency",
          "docstring": "Analyze communication pattern consistency across all protocols.",
          "is_public": false
        },
        {
          "name": "_analyze_gate_consistency",
          "docstring": "Analyze gate criteria consistency across all protocols.",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "AIDirectiveValidator",
          "docstring": "Validates AI directive consistency across protocols."
        }
      ],
      "total_lines": 536,
      "code_lines": 412,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validate_brief.py": {
      "name": "validate_brief",
      "path": "scripts/validate_brief.py",
      "size_bytes": 10084,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Brief Validation Script",
      "full_docstring": "Brief Validation Script\n\nValidates project brief completeness and quality according to Protocol 00 standards.\nEnsures all required sections are present and meet quality criteria.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for brief validation.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "validate_brief_file",
          "docstring": "Validate a brief file and return validation results.",
          "is_public": true
        },
        {
          "name": "_check_required_sections",
          "docstring": "Check if all required sections are present.",
          "is_public": false
        },
        {
          "name": "_check_section_quality",
          "docstring": "Check quality of individual sections.",
          "is_public": false
        },
        {
          "name": "_extract_sections",
          "docstring": "Extract sections from markdown content.",
          "is_public": false
        },
        {
          "name": "_assess_section_quality",
          "docstring": "Assess quality of a specific section.",
          "is_public": false
        },
        {
          "name": "_count_list_items",
          "docstring": "Count list items in markdown content.",
          "is_public": false
        },
        {
          "name": "_normalize_section_name",
          "docstring": "Normalize section name for comparison.",
          "is_public": false
        },
        {
          "name": "_calculate_score",
          "docstring": "Calculate overall validation score.",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "BriefValidator",
          "docstring": "Validates project brief files against Protocol 00 standards."
        }
      ],
      "total_lines": 269,
      "code_lines": 201,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validate_compliance_assets.py": {
      "name": "validate_compliance_assets",
      "path": "scripts/validate_compliance_assets.py",
      "size_bytes": 2849,
      "last_modified": "2025-10-18T15:30:02.166688",
      "description": "Validate that compliance docs and gate config match generator output.",
      "full_docstring": "Validate that compliance docs and gate config match generator output.",
      "functions": [
        {
          "name": "build_generator",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "compare_file",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 99,
      "code_lines": 81,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validate_gate_01_compliance.py": {
      "name": "validate_gate_01_compliance",
      "path": "scripts/validate_gate_01_compliance.py",
      "size_bytes": 2521,
      "last_modified": "2025-10-19T09:51:49.804797",
      "description": "Gate 4 validator for Protocol 01: Real Compliance Validation.",
      "full_docstring": "Gate 4 validator for Protocol 01: Real Compliance Validation.\n\nValidates HIPAA compliance checks and quality gates enforcement.\nThis script delegates to existing compliance validators.",
      "functions": [
        {
          "name": "run_compliance_checks",
          "docstring": "Run compliance validation scripts.\n\nArgs:\n    scripts_dir: Directory containing compliance scripts\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 93,
      "code_lines": 70,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_01_final.py": {
      "name": "validate_gate_01_final",
      "path": "scripts/validate_gate_01_final.py",
      "size_bytes": 3670,
      "last_modified": "2025-10-19T09:52:00.629018",
      "description": "Gate 5 validator for Protocol 01: Final Validation & Approval Readiness.",
      "full_docstring": "Gate 5 validator for Protocol 01: Final Validation & Approval Readiness.\n\nValidates readability \u2265 90, zero factual discrepancies, empathy coverage \u2265 3 tokens.",
      "functions": [
        {
          "name": "validate_final_proposal",
          "docstring": "Validate final proposal quality.\n\nArgs:\n    proposal_path: Path to PROPOSAL.md\n    validation_report_path: Path to proposal-validation-report.json\n    min_readability: Minimum readability score (default 90)\n    min_empathy: Minimum empathy tokens (default 3)\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 129,
      "code_lines": 102,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_01_jobpost.py": {
      "name": "validate_gate_01_jobpost",
      "path": "scripts/validate_gate_01_jobpost.py",
      "size_bytes": 2570,
      "last_modified": "2025-10-19T09:51:19.363991",
      "description": "Gate 1 validator for Protocol 01: Job Post Intake Validation.",
      "full_docstring": "Gate 1 validator for Protocol 01: Job Post Intake Validation.\n\nValidates that jobpost-analysis.json captures objectives, deliverables,\ntone signals, and risk notes with completeness score \u2265 0.9.",
      "functions": [
        {
          "name": "validate_jobpost_analysis",
          "docstring": "Validate job post analysis completeness.\n\nArgs:\n    analysis_path: Path to jobpost-analysis.json\n    threshold: Minimum completeness score (default 0.9)\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 88,
      "code_lines": 67,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_01_structure.py": {
      "name": "validate_gate_01_structure",
      "path": "scripts/validate_gate_01_structure.py",
      "size_bytes": 4613,
      "last_modified": "2025-10-19T09:51:42.924307",
      "description": "Gate 3 validator for Protocol 01: Proposal Structure Integrity.",
      "full_docstring": "Gate 3 validator for Protocol 01: Proposal Structure Integrity.\n\nValidates that PROPOSAL.md includes all mandatory sections with \u2265 120 words each\nand empathy tokens are logged.",
      "functions": [
        {
          "name": "count_words",
          "docstring": "Count words in text.",
          "is_public": true
        },
        {
          "name": "validate_proposal_structure",
          "docstring": "Validate proposal structure and humanization.\n\nArgs:\n    proposal_path: Path to PROPOSAL.md\n    humanization_log_path: Path to humanization-log.json\n    min_words: Minimum words per section (default 120)\n    min_score: Minimum structure score (default 0.95)\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 152,
      "code_lines": 120,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_01_tone.py": {
      "name": "validate_gate_01_tone",
      "path": "scripts/validate_gate_01_tone.py",
      "size_bytes": 2508,
      "last_modified": "2025-10-19T09:51:26.790282",
      "description": "Gate 2 validator for Protocol 01: Tone Strategy Confidence.",
      "full_docstring": "Gate 2 validator for Protocol 01: Tone Strategy Confidence.\n\nValidates tone classification confidence \u2265 0.8 with mapped strategy labels.",
      "functions": [
        {
          "name": "validate_tone_mapping",
          "docstring": "Validate tone mapping confidence and strategy.\n\nArgs:\n    tone_map_path: Path to tone-map.json\n    threshold: Minimum confidence score (default 0.8)\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 92,
      "code_lines": 70,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_02_confirmation.py": {
      "name": "validate_gate_02_confirmation",
      "path": "scripts/validate_gate_02_confirmation.py",
      "size_bytes": 3313,
      "last_modified": "2025-10-19T09:53:15.990946",
      "description": "Gate 4 validator for Protocol 02: Discovery Confirmation Gate.",
      "full_docstring": "Gate 4 validator for Protocol 02: Discovery Confirmation Gate.\n\nValidates client-approved recap with no unresolved blockers and all artifacts archived.",
      "functions": [
        {
          "name": "validate_confirmation",
          "docstring": "Validate discovery confirmation.\n\nArgs:\n    recap_path: Path to discovery-recap.md\n    transcripts_dir: Directory containing communication transcripts\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 109,
      "code_lines": 80,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_02_expectations.py": {
      "name": "validate_gate_02_expectations",
      "path": "scripts/validate_gate_02_expectations.py",
      "size_bytes": 4072,
      "last_modified": "2025-10-19T09:53:06.447248",
      "description": "Gate 3 validator for Protocol 02: Expectation Alignment Gate.",
      "full_docstring": "Gate 3 validator for Protocol 02: Expectation Alignment Gate.\n\nValidates timeline, budget, collaboration cadence, and governance confirmed by client.",
      "functions": [
        {
          "name": "validate_expectations",
          "docstring": "Validate expectation alignment.\n\nArgs:\n    timeline_path: Path to timeline-discussion.md\n    communication_path: Path to communication-plan.md\n    governance_path: Path to governance-map.md\n    recap_path: Path to discovery-recap.md\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 129,
      "code_lines": 102,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_02_objectives.py": {
      "name": "validate_gate_02_objectives",
      "path": "scripts/validate_gate_02_objectives.py",
      "size_bytes": 2652,
      "last_modified": "2025-10-19T09:52:43.459908",
      "description": "Gate 1 validator for Protocol 02: Objective Alignment Gate.",
      "full_docstring": "Gate 1 validator for Protocol 02: Objective Alignment Gate.\n\nValidates business objectives, user goals, and success metrics with coverage \u2265 95%.",
      "functions": [
        {
          "name": "validate_objectives",
          "docstring": "Validate objective alignment in client context notes.\n\nArgs:\n    context_notes_path: Path to client-context-notes.md\n    threshold: Minimum coverage score (default 0.95)\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 88,
      "code_lines": 66,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_02_requirements.py": {
      "name": "validate_gate_02_requirements",
      "path": "scripts/validate_gate_02_requirements.py",
      "size_bytes": 3771,
      "last_modified": "2025-10-19T09:52:55.341976",
      "description": "Gate 2 validator for Protocol 02: Requirement Completeness Gate.",
      "full_docstring": "Gate 2 validator for Protocol 02: Requirement Completeness Gate.\n\nValidates MVP features, optional backlog, and technical constraints completeness \u2265 0.9.",
      "functions": [
        {
          "name": "validate_requirements",
          "docstring": "Validate requirement completeness.\n\nArgs:\n    discovery_form_path: Path to client-discovery-form.md\n    scope_clarification_path: Path to scope-clarification.md\n    threshold: Minimum completeness score (default 0.9)\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 116,
      "code_lines": 87,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_03_approvals.py": {
      "name": "validate_gate_03_approvals",
      "path": "scripts/validate_gate_03_approvals.py",
      "size_bytes": 3019,
      "last_modified": "2025-10-19T09:54:12.757375",
      "description": "Gate 3 validator for Protocol 03: Approval Compliance.",
      "full_docstring": "Gate 3 validator for Protocol 03: Approval Compliance.\n\nValidates client and internal approvals with timestamps and references.",
      "functions": [
        {
          "name": "validate_approvals",
          "docstring": "Validate brief approval compliance.\n\nArgs:\n    approval_record_path: Path to BRIEF-APPROVAL-RECORD.json\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 100,
      "code_lines": 74,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_03_discovery.py": {
      "name": "validate_gate_03_discovery",
      "path": "scripts/validate_gate_03_discovery.py",
      "size_bytes": 3271,
      "last_modified": "2025-10-19T09:53:50.458306",
      "description": "Gate 1 validator for Protocol 03: Discovery Evidence Verification.",
      "full_docstring": "Gate 1 validator for Protocol 03: Discovery Evidence Verification.\n\nValidates all prerequisite artifacts, resolves inconsistencies, validation score \u2265 0.95.",
      "functions": [
        {
          "name": "validate_discovery_evidence",
          "docstring": "Validate discovery artifacts for project brief creation.\n\nArgs:\n    discovery_dir: Directory containing Protocol 02 artifacts\n    output_path: Output path for validation report\n    threshold: Minimum validation score (default 0.95)\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 112,
      "code_lines": 87,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_gate_03_structure.py": {
      "name": "validate_gate_03_structure",
      "path": "scripts/validate_gate_03_structure.py",
      "size_bytes": 4271,
      "last_modified": "2025-10-19T09:54:04.278466",
      "description": "Gate 2 validator for Protocol 03: Structural Integrity.",
      "full_docstring": "Gate 2 validator for Protocol 03: Structural Integrity.\n\nValidates brief structure, traceability map, and completeness with coverage \u2265 100%.",
      "functions": [
        {
          "name": "validate_brief_structure",
          "docstring": "Validate project brief structural integrity.\n\nArgs:\n    brief_path: Path to PROJECT-BRIEF.md\n    traceability_path: Path to traceability-map.json\n    output_path: Output path for structure report\n    \nReturns:\n    Validation result with status and notes",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 143,
      "code_lines": 111,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_prd_gate.py": {
      "name": "validate_prd_gate",
      "path": "scripts/validate_prd_gate.py",
      "size_bytes": 4185,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Validate PRD gate artifacts before proceeding with generation.",
      "full_docstring": "Validate PRD gate artifacts before proceeding with generation.",
      "functions": [
        {
          "name": "parse_front_matter",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "validate_timestamp",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "validate_metadata",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "validate_sections",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "validate_architecture",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "ValidationError",
          "docstring": ""
        }
      ],
      "total_lines": 116,
      "code_lines": 90,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validate_proposal.py": {
      "name": "validate_proposal",
      "path": "scripts/validate_proposal.py",
      "size_bytes": 4746,
      "last_modified": "2025-10-18T16:11:25.794508",
      "description": "Real Proposal Validation Script",
      "full_docstring": "Real Proposal Validation Script\nActually validates proposal content using real tools",
      "functions": [
        {
          "name": "validate_proposal",
          "docstring": "Actually validate proposal content",
          "is_public": true
        },
        {
          "name": "check_grammar",
          "docstring": "Actually check grammar using external tools",
          "is_public": true
        },
        {
          "name": "validate_structure",
          "docstring": "Actually validate proposal structure",
          "is_public": true
        },
        {
          "name": "analyze_empathy_tokens",
          "docstring": "Actually analyze empathy tokens",
          "is_public": true
        },
        {
          "name": "check_factual_accuracy",
          "docstring": "Actually check for factual accuracy indicators",
          "is_public": true
        },
        {
          "name": "calculate_overall_score",
          "docstring": "Actually calculate overall validation score",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 155,
      "code_lines": 109,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_protocol_handoffs.py": {
      "name": "validate_protocol_handoffs",
      "path": "scripts/validate_protocol_handoffs.py",
      "size_bytes": 19560,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Protocol Handoff Validation Script",
      "full_docstring": "Protocol Handoff Validation Script\n\nValidates protocol transitions and handoff logic:\n- Output \u2192 Input alignment\n- Handoff instruction validation\n- State transition validation",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for protocol handoff validation.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "validate_protocol_handoffs",
          "docstring": "Run comprehensive handoff validation across all protocols.",
          "is_public": true
        },
        {
          "name": "_validate_single_handoff",
          "docstring": "Validate handoff for a single protocol.",
          "is_public": false
        },
        {
          "name": "_extract_outputs",
          "docstring": "Extract output artifacts mentioned in protocol.",
          "is_public": false
        },
        {
          "name": "_extract_handoff_instructions",
          "docstring": "Extract handoff instructions from protocol.",
          "is_public": false
        },
        {
          "name": "_extract_state_preservation",
          "docstring": "Extract state preservation instructions.",
          "is_public": false
        },
        {
          "name": "_extract_rollback_procedures",
          "docstring": "Extract rollback procedures from protocol.",
          "is_public": false
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around a match.",
          "is_public": false
        },
        {
          "name": "_validate_expected_outputs",
          "docstring": "Validate that expected outputs are mentioned in protocol.",
          "is_public": false
        },
        {
          "name": "_validate_handoff_clarity",
          "docstring": "Validate that handoff instructions are clear.",
          "is_public": false
        },
        {
          "name": "_validate_next_protocol_invocation",
          "docstring": "Validate next protocol invocation instructions.",
          "is_public": false
        },
        {
          "name": "_validate_handoff_alignment",
          "docstring": "Validate handoff alignment between protocols.",
          "is_public": false
        },
        {
          "name": "_calculate_alignment_score",
          "docstring": "Calculate alignment score between outputs and inputs.",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "ProtocolHandoffValidator",
          "docstring": "Validates protocol handoffs and transitions."
        }
      ],
      "total_lines": 479,
      "code_lines": 372,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validate_protocol_steps.py": {
      "name": "validate_protocol_steps",
      "path": "scripts/validate_protocol_steps.py",
      "size_bytes": 18793,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Protocol Step Sequence Validation Script",
      "full_docstring": "Protocol Step Sequence Validation Script\n\nValidates the logical flow and sequence of steps within each protocol:\n- Step numbering validation\n- Step dependency validation  \n- Phase consistency validation",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for protocol step validation.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "validate_protocol_steps",
          "docstring": "Run comprehensive step validation across all protocols.",
          "is_public": true
        },
        {
          "name": "_validate_single_protocol",
          "docstring": "Validate a single protocol's step sequence.",
          "is_public": false
        },
        {
          "name": "_validate_script_injection",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_extract_steps",
          "docstring": "Extract all steps from protocol content.",
          "is_public": false
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract all phases from protocol content.",
          "is_public": false
        },
        {
          "name": "_validate_step_numbering",
          "docstring": "Validate step numbering sequence.",
          "is_public": false
        },
        {
          "name": "_validate_step_dependencies",
          "docstring": "Validate step dependencies and references.",
          "is_public": false
        },
        {
          "name": "_validate_phase_consistency",
          "docstring": "Validate phase consistency and structure.",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "ProtocolStepValidator",
          "docstring": "Validates step sequences and dependencies within protocols."
        }
      ],
      "total_lines": 462,
      "code_lines": 353,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validate_protocols.py": {
      "name": "validate_protocols",
      "path": "scripts/validate_protocols.py",
      "size_bytes": 2984,
      "last_modified": "2025-10-18T05:43:00.943785",
      "description": "Protocol Validation Script",
      "full_docstring": "Protocol Validation Script\nValidates all protocols in the AI-driven workflow system",
      "functions": [
        {
          "name": "validate_protocol_structure",
          "docstring": "Validate a single protocol file structure",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 89,
      "code_lines": 72,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_script_bindings.py": {
      "name": "validate_script_bindings",
      "path": "scripts/validate_script_bindings.py",
      "size_bytes": 3362,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Validate automation script bindings for unified protocols.",
      "full_docstring": "Validate automation script bindings for unified protocols.",
      "functions": [
        {
          "name": "load_registry",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "extract_scripts_from_markdown",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "validate_script_path",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "validate_registry",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "validate_markdown_scripts",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_args",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 99,
      "code_lines": 73,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validate_script_registry.py": {
      "name": "validate_script_registry",
      "path": "scripts/validate_script_registry.py",
      "size_bytes": 8618,
      "last_modified": "2025-10-19T11:12:25.881678",
      "description": "Script Registry Validator - Phase 3 Governance Tool",
      "full_docstring": "Script Registry Validator - Phase 3 Governance Tool\n\nValidates that all scripts in the repository are properly registered\nin script-registry.json and identifies orphaned or undocumented scripts.",
      "functions": [
        {
          "name": "load_registry",
          "docstring": "Load the script registry.",
          "is_public": true
        },
        {
          "name": "collect_registered_scripts",
          "docstring": "Collect all scripts mentioned in the registry.",
          "is_public": true
        },
        {
          "name": "find_all_scripts",
          "docstring": "Find all Python and shell scripts in the scripts directory.",
          "is_public": true
        },
        {
          "name": "categorize_scripts",
          "docstring": "Categorize scripts into:\n- orphaned: exist but not registered\n- phantom: registered but don't exist\n- valid: registered and exist",
          "is_public": true
        },
        {
          "name": "calculate_coverage",
          "docstring": "Calculate registration coverage percentage.",
          "is_public": true
        },
        {
          "name": "generate_report",
          "docstring": "Generate a validation report.",
          "is_public": true
        },
        {
          "name": "print_summary",
          "docstring": "Print a human-readable summary.",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "Main entry point.",
          "is_public": true
        },
        {
          "name": "_collect_recursive",
          "docstring": "",
          "is_public": false
        }
      ],
      "classes": [],
      "total_lines": 271,
      "code_lines": 204,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_tasks.py": {
      "name": "validate_tasks",
      "path": "scripts/validate_tasks.py",
      "size_bytes": 4372,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Validate tasks.json DAG and references.",
      "full_docstring": "Validate tasks.json DAG and references.\n- Supports list of tasks or dict-of-lists keyed by lane\n- Checks:\n  * unique task ids\n  * blocked_by reference existence\n  * cycle detection via Kahn topo sort\n  * enum validation for state/persona\n\nUsage:\n  python scripts/validate_tasks.py --input tasks.json\nExit codes:\n  0 success; 2 validation error or bad input",
      "functions": [
        {
          "name": "_collect_tasks",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_as_list",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "validate",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 152,
      "code_lines": 117,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validate_workflow_completeness.py": {
      "name": "validate_workflow_completeness",
      "path": "scripts/validate_workflow_completeness.py",
      "size_bytes": 3992,
      "last_modified": "2025-10-18T05:43:00.943785",
      "description": "Workflow Completeness Validation Script",
      "full_docstring": "Workflow Completeness Validation Script\nValidates complete SDLC coverage across all protocols",
      "functions": [
        {
          "name": "analyze_workflow_completeness",
          "docstring": "Analyze workflow completeness across SDLC phases",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 112,
      "code_lines": 92,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": false
    },
    "scripts/validate_workflow_integration.py": {
      "name": "validate_workflow_integration",
      "path": "scripts/validate_workflow_integration.py",
      "size_bytes": 27521,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Workflow Integration Validation Script",
      "full_docstring": "Workflow Integration Validation Script\n\nComprehensive validation script that checks:\n1. Protocol alignment - All protocols reference correct scripts\n2. Connectivity validation - Protocol outputs match next protocol inputs\n3. Conflict detection - No contradicting directives between protocols\n4. Script validation - All referenced scripts exist and are executable\n5. Documentation validation - README and guides are complete and accurate",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for workflow validation.",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "validate_workflow_integration",
          "docstring": "Run comprehensive workflow validation.",
          "is_public": true
        },
        {
          "name": "_validate_protocol_alignment",
          "docstring": "Validate that all protocols reference correct scripts.",
          "is_public": false
        },
        {
          "name": "_validate_connectivity",
          "docstring": "Validate that protocol outputs match next protocol inputs.",
          "is_public": false
        },
        {
          "name": "_validate_conflicts",
          "docstring": "Detect conflicts and contradictions between protocols.",
          "is_public": false
        },
        {
          "name": "_validate_scripts",
          "docstring": "Validate that all referenced scripts exist and are executable.",
          "is_public": false
        },
        {
          "name": "_validate_documentation",
          "docstring": "Validate documentation completeness and accuracy.",
          "is_public": false
        },
        {
          "name": "_merge_results",
          "docstring": "Merge validation results from different checks.",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "WorkflowValidator",
          "docstring": "Validates ai-driven-workflow integration for alignment, connectivity, and conflicts."
        }
      ],
      "total_lines": 656,
      "code_lines": 524,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validate_workflows.py": {
      "name": "validate_workflows",
      "path": "scripts/validate_workflows.py",
      "size_bytes": 4573,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "No description available",
      "full_docstring": "No description available",
      "functions": [
        {
          "name": "read_file",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "find_markdown_files",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "parse_frontmatter",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "check_frontmatter",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "check_sections",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "validate",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 157,
      "code_lines": 130,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/validation_gates.py": {
      "name": "validation_gates",
      "path": "scripts/validation_gates.py",
      "size_bytes": 21953,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Validation Gates for Unified Developer Workflow",
      "full_docstring": "Validation Gates for Unified Developer Workflow\n\nImplements human validation checkpoints for each phase with\napproval workflows and evidence tracking.",
      "functions": [
        {
          "name": "cli",
          "docstring": "Validation Gates CLI for Unified Developer Workflow",
          "is_public": true
        },
        {
          "name": "request",
          "docstring": "Request validation for a phase",
          "is_public": true
        },
        {
          "name": "approve",
          "docstring": "Approve or reject validation request",
          "is_public": true
        },
        {
          "name": "status",
          "docstring": "Get validation request status",
          "is_public": true
        },
        {
          "name": "list_pending",
          "docstring": "List pending validation requests",
          "is_public": true
        },
        {
          "name": "interactive",
          "docstring": "Execute interactive validation for phase",
          "is_public": true
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_load_validation_config",
          "docstring": "Load validation configuration",
          "is_public": false
        },
        {
          "name": "_get_validation_checkpoint",
          "docstring": "Get validation checkpoint for phase",
          "is_public": false
        },
        {
          "name": "_phase_review_protocol",
          "docstring": "Select the review protocol associated with a validation phase.",
          "is_public": false
        },
        {
          "name": "_create_validation_request",
          "docstring": "Create validation request for phase",
          "is_public": false
        },
        {
          "name": "_save_validation_request",
          "docstring": "Save validation request to file",
          "is_public": false
        },
        {
          "name": "_load_validation_request",
          "docstring": "Load validation request from file",
          "is_public": false
        },
        {
          "name": "request_validation",
          "docstring": "Request validation for a phase",
          "is_public": true
        },
        {
          "name": "approve_validation",
          "docstring": "Approve or reject validation request",
          "is_public": true
        },
        {
          "name": "get_validation_status",
          "docstring": "Get validation request status",
          "is_public": true
        },
        {
          "name": "list_pending_validations",
          "docstring": "List all pending validation requests",
          "is_public": true
        },
        {
          "name": "execute_interactive_validation",
          "docstring": "Execute interactive validation for phase",
          "is_public": true
        }
      ],
      "classes": [
        {
          "name": "ValidationGates",
          "docstring": "Human validation gates for unified workflow"
        }
      ],
      "total_lines": 560,
      "code_lines": 431,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    },
    "scripts/workflow_automation.py": {
      "name": "workflow_automation",
      "path": "scripts/workflow_automation.py",
      "size_bytes": 7123,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Workflow automation adapter bridging orchestration and gates.",
      "full_docstring": "Workflow automation adapter bridging orchestration and gates.",
      "functions": [
        {
          "name": "_ensure_project_generator_package",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "__init__",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "execute_phase",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "run_gates",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "collect_evidence",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "get_status",
          "docstring": "",
          "is_public": true
        },
        {
          "name": "_load_config",
          "docstring": "",
          "is_public": false
        },
        {
          "name": "_phase_to_index",
          "docstring": "",
          "is_public": false
        }
      ],
      "classes": [
        {
          "name": "GateOutcome",
          "docstring": ""
        },
        {
          "name": "PhaseExecutionResult",
          "docstring": ""
        },
        {
          "name": "WorkflowStatus",
          "docstring": ""
        },
        {
          "name": "UnifiedWorkflowAutomation",
          "docstring": "Coordinates quality/validation gates with the orchestrator."
        }
      ],
      "total_lines": 210,
      "code_lines": 165,
      "has_main_guard": false,
      "has_shebang": false,
      "is_executable": true
    },
    "scripts/write_context_report.py": {
      "name": "write_context_report",
      "path": "scripts/write_context_report.py",
      "size_bytes": 2965,
      "last_modified": "2025-10-17T02:36:56.638890",
      "description": "Write a minimal project context report to .cursor/ai-governor/project.json.",
      "full_docstring": "Write a minimal project context report to .cursor/ai-governor/project.json.\n- Detects root .cursor (isolation hint)\n- Attempts to read generator-config.json if present for stack\n- Accepts overrides via CLI flags\n\nUsage:\n  python scripts/write_context_report.py --project-name myapp --industry healthcare     --frontend nextjs --backend fastapi --database postgres --auth auth0 --deploy aws     --compliance hipaa,gdpr --output .cursor/ai-governor/project.json",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "is_public": true
        }
      ],
      "classes": [],
      "total_lines": 84,
      "code_lines": 70,
      "has_main_guard": true,
      "has_shebang": true,
      "is_executable": true
    }
  }
}