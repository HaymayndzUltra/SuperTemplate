# PROTOCOL REQUIREMENTS FORM - PROTOCOL 12
# Post-Deployment Monitoring & Observability

## ============================================
## SECTION 1: BASIC INFORMATION
## ============================================

protocol_number: "12"
protocol_name: "monitoring-observability"
domain_compliance: "Site Reliability"
purpose: "Establish comprehensive observability coverage, activate monitoring dashboards, and validate alerting for newly deployed releases."

## ============================================
## SECTION 2: AI ROLE & CONTEXT
## ============================================

ai_role: "Site Reliability Engineer"
primary_guardrail: "DO NOT mark monitoring complete until dashboards, alert policies, and runbooks have been validated with live telemetry."

prerequisites:
  - protocol: "11-production-deployment"
    required_artifacts: "deployment-run-log.txt, deployment-health-metrics.json, post-release-validation-report.json"
  - protocol: "6-technical-design-architecture"
    required_artifacts: "architecture-spec.md, component-inventory, integration-map"

phase_in_workflow: "Immediately after production deployment, before ongoing operations and incident response."

## ============================================
## SECTION 3: EXECUTION STRUCTURE
## ============================================

phases:
  - phase_number: 1
    phase_name: "Observability Baseline Activation"
    objective: "Configure telemetry ingestion, dashboards, and SLO baselines aligned with architecture and release data."

    steps:
      - step_number: 1
        action_type: "MUST"
        action_title: "Map Services to Telemetry"
        instructions: "Cross-reference architecture components with deployed services to ensure logs, metrics, traces, and events are collected."
        communication_template: "[PHASE 1] Mapping services and telemetry sources for observability coverage..."
        halt_condition: "Stop if any critical service lacks telemetry configuration."

      - step_number: 2
        action_type: "MUST"
        action_title: "Configure Dashboards & SLOs"
        instructions: "Create or update dashboards, define service level objectives, and store visualization configurations."
        communication_template: "[DASHBOARD] Configuring dashboards and SLO baselines for production monitoring..."
        halt_condition: "Await stakeholder sign-off when new SLOs are introduced."

      - step_number: 3
        action_type: "GUIDELINE"
        action_title: "Instrument Synthetic Checks"
        instructions: "Enable synthetic tests for customer journeys and ensure endpoints have monitoring coverage."
        communication_template: "[SYNTHETIC] Setting up synthetic monitoring for critical journeys..."
        halt_condition: ""

    evidence_collection:
      - evidence_item: "telemetry-coverage-map.json"
        storage_location: ".artifacts/monitoring/telemetry-coverage-map.json"
      - evidence_item: "dashboard-configurations.zip"
        storage_location: ".artifacts/monitoring/dashboard-configurations.zip"
      - evidence_item: "slo-baseline-report.md"
        storage_location: ".artifacts/monitoring/slo-baseline-report.md"

    quality_gate:
      gate_name: "Observability Coverage Gate"
      criteria: "All critical services mapped to telemetry, dashboards configured, and SLO baselines documented."
      failure_handling: "Coordinate with engineering teams to enable missing telemetry and re-run coverage validation."

  - phase_number: 2
    phase_name: "Alerting & Runbook Validation"
    objective: "Activate alert policies, test escalation workflows, and align incident runbooks with monitoring outputs."

    steps:
      - step_number: 1
        action_type: "MUST"
        action_title: "Define Alert Policies"
        instructions: "Create alert rules for error budgets, latency, availability, and capacity thresholds aligned with SLOs."
        communication_template: "[ALERTING] Configuring alert policies for production services..."
        halt_condition: "Await security/compliance approval for paging rules touching sensitive data."

      - step_number: 2
        action_type: "MUST"
        action_title: "Test Alert Routing"
        instructions: "Trigger test alerts to verify escalation paths, on-call rotations, and notification channels."
        communication_template: "[TEST] Executing alert routing tests to validate on-call response..."
        halt_condition: "Stop if alert routing fails or notifications not received."

      - step_number: 3
        action_type: "MUST"
        action_title: "Update Runbooks"
        instructions: "Link dashboards and alert identifiers to incident response runbooks with decision trees and mitigation steps."
        communication_template: "[RUNBOOK] Updating incident response playbooks with monitoring references..."
        halt_condition: ""

    evidence_collection:
      - evidence_item: "alert-policy-catalog.yaml"
        storage_location: ".artifacts/monitoring/alert-policy-catalog.yaml"
      - evidence_item: "alert-test-results.json"
        storage_location: ".artifacts/monitoring/alert-test-results.json"
      - evidence_item: "runbook-updates.md"
        storage_location: ".artifacts/monitoring/runbook-updates.md"

    quality_gate:
      gate_name: "Alert Readiness Gate"
      criteria: "Alert policies configured, routing verified, and runbooks updated with monitoring references."
      failure_handling: "Fix routing issues, update runbooks, and retest alert flows before moving to continuous monitoring."

  - phase_number: 3
    phase_name: "Continuous Monitoring & Reporting"
    objective: "Validate live telemetry, capture early release metrics, and hand off monitoring state to incident response."

    steps:
      - step_number: 1
        action_type: "MUST"
        action_title: "Establish Monitoring Sessions"
        instructions: "Observe dashboards for an agreed stabilization period, document anomalies, and confirm alert thresholds behave as expected."
        communication_template: "[PHASE 3] Monitoring stabilization window and capturing observations..."
        halt_condition: "Extend observation if anomalies persist or thresholds misfire."

      - step_number: 2
        action_type: "GUIDELINE"
        action_title: "Compile Observability Report"
        instructions: "Summarize telemetry findings, alert tests, and SLO adherence; share with stakeholders and incident response."
        communication_template: "[REPORT] Compiling observability status report for stakeholders..."
        halt_condition: ""

      - step_number: 3
        action_type: "MUST"
        action_title: "Hand Off Monitoring Artifacts"
        instructions: "Package monitoring artifacts, runbook updates, and open issues for Protocol 13 to consume."
        communication_template: "[HANDOFF] Delivering monitoring artifacts to incident response team..."
        halt_condition: ""

    evidence_collection:
      - evidence_item: "stabilization-observation-log.md"
        storage_location: ".artifacts/monitoring/stabilization-observation-log.md"
      - evidence_item: "observability-status-report.md"
        storage_location: ".artifacts/monitoring/observability-status-report.md"
      - evidence_item: "monitoring-handoff-package.zip"
        storage_location: ".artifacts/monitoring/monitoring-handoff-package.zip"

    quality_gate:
      gate_name: "Monitoring Validation Gate"
      criteria: "Stabilization log shows no critical anomalies, observability report approved, and handoff package delivered."
      failure_handling: "Extend monitoring window, recalibrate alerts, or escalate to incident response before completion."

## ============================================
## SECTION 4: INTEGRATION & DATA FLOW
## ============================================

inputs_from:
  - protocol: "11-production-deployment"
    artifacts_consumed: "deployment-run-log.txt, deployment-health-metrics.json, post-release-validation-report.json"
    usage: "Provide release context and baseline metrics for monitoring configuration."
  - protocol: "6-technical-design-architecture"
    artifacts_consumed: "architecture-spec.md, integration-map"
    usage: "Ensure observability coverage aligns with architecture components and dependencies."

outputs_to:
  - protocol: "13-incident-response-rollback"
    artifacts_provided: "monitoring-handoff-package.zip, alert-policy-catalog.yaml, stabilization-observation-log.md"
    purpose: "Enable incident responders to act on current monitoring setup and known issues."
  - protocol: "5-implementation-retrospective"
    artifacts_provided: "observability-status-report.md, slo-baseline-report.md"
    purpose: "Provide retrospective insights into release stability and observability coverage."

## ============================================
## SECTION 5: AUTOMATION & TOOLING
## ============================================

automation_hooks:
  - hook_name: "collect_perf"
    trigger_point: "Phase 1 telemetry mapping"
    command: "python scripts/collect_perf.py --env production --output .artifacts/monitoring/telemetry-coverage-map.json"
    expected_output: "telemetry-coverage-map.json capturing service-to-metric coverage"

  - hook_name: "workflow_automation"
    trigger_point: "Phase 2 alert testing"
    command: "python scripts/workflow_automation.py --workflow alert-tests --output .artifacts/monitoring/alert-test-results.json"
    expected_output: "alert-test-results.json summarizing routing status and response times"

  - hook_name: "evidence_report"
    trigger_point: "Phase 3 reporting"
    command: "python scripts/evidence_report.py --type monitoring --output .artifacts/monitoring/observability-status-report.md"
    expected_output: "observability-status-report.md summarizing monitoring health and observations"

## ============================================
## SECTION 6: COMMUNICATION PROTOCOLS
## ============================================

announcements:
  phase_start_template: "[MONITORING PHASE {N} START] - Beginning {phase_name}..."
  phase_complete_template: "[MONITORING PHASE {N} COMPLETE] - {phase_name} finished successfully."
  automation_status_template: "[AUTOMATION] {script_name} executed: {status}"

validation_prompts:
  - prompt_context: "After observability coverage validation"
    prompt_template: "[VALIDATION] Observability coverage complete. Approve alert configuration and proceed to alert testing? (yes/no)"

  - prompt_context: "Before closing monitoring window"
    prompt_template: "[HANDOFF APPROVAL] Monitoring stabilization window complete. Approve handoff to incident response? (yes/no)"

error_handling:
  - error_type: "TelemetryGap"
    error_message_template: "[ERROR] Telemetry coverage gap detected for service {service_name}."
    recovery_steps: "1. Engage service owner, 2. Enable required telemetry exporters, 3. Update coverage map, 4. Re-run validation."

  - error_type: "AlertRoutingFailure"
    error_message_template: "[ERROR] Alert routing test failed for policy {policy_id}."
    recovery_steps: "1. Check notification channels, 2. Update routing configuration, 3. Re-run workflow_automation alert-tests."

  - error_type: "UnstableMetrics"
    error_message_template: "[WARNING] Metrics unstable during stabilization window: {details}."
    recovery_steps: "1. Continue monitoring, 2. Investigate anomalies with dev team, 3. Escalate to incident response if thresholds breached."

## ============================================
## SECTION 7: COMPLETION & HANDOFF
## ============================================

completion_checklist:
  - "Telemetry coverage map approved"
  - "Dashboards and SLO baselines configured"
  - "Alert policies and routing validated"
  - "Runbooks updated with monitoring references"
  - "Observability report distributed"
  - "Monitoring handoff package delivered to incident response"

handoff_command: "[PROTOCOL COMPLETE] - Monitoring activated. Ready for Protocol 13 (Incident Response & Rollback)."

next_protocol: "13-incident-response-rollback"

## ============================================
## SECTION 8: ADDITIONAL CONTEXT (OPTIONAL)
## ============================================

context: "Ensures production releases are observable, alerting is actionable, and incident response teams receive validated monitoring assets."

focus_areas:
  - "End-to-end telemetry coverage"
  - "Alert policy accuracy and routing"
  - "Actionable runbooks with monitoring context"

special_considerations: "If operating under compliance requirements, ensure monitoring artifacts comply with data retention and access policies."
