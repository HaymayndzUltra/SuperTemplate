#!/usr/bin/env python3
"""Analyze script references within protocol documents and flag missing files."""

from __future__ import annotations

import re
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List, Set


REPO_ROOT = Path(__file__).resolve().parent.parent
PROTOCOL_DIR = REPO_ROOT / ".cursor" / "ai-driven-workflow"

SCRIPT_PATTERN = re.compile(r"scripts/[\w\-/]+\.(?:py|sh|bash)")


@dataclass
class ScriptReference:
    """Represents a script reference inside a protocol file."""

    protocol: Path
    script_path: Path
    exists: bool


def collect_references() -> List[ScriptReference]:
    references: List[ScriptReference] = []
    for protocol_file in sorted(PROTOCOL_DIR.glob("[0-9][0-9]-*.md")):
        content = protocol_file.read_text(encoding="utf-8")
        found_paths: Set[str] = set(SCRIPT_PATTERN.findall(content))
        for raw_path in sorted(found_paths):
            script_path = (REPO_ROOT / raw_path).resolve()
            references.append(
                ScriptReference(
                    protocol=protocol_file,
                    script_path=script_path,
                    exists=script_path.exists(),
                )
            )
    return references


def render_report(references: List[ScriptReference]) -> str:
    missing = [ref for ref in references if not ref.exists]
    per_protocol: Dict[Path, Dict[str, int]] = {}
    for ref in references:
        stats = per_protocol.setdefault(ref.protocol, {"total": 0, "missing": 0})
        stats["total"] += 1
        if not ref.exists:
            stats["missing"] += 1
    lines: List[str] = []
    lines.append("# Protocol Script Reference Report")
    lines.append("")
    lines.append("Generated by `scripts/analyze_protocol_script_references.py`.")
    lines.append("")
    lines.append(f"- Protocol files scanned: **{len({ref.protocol for ref in references})}**")
    lines.append(f"- Unique script references: **{len(references)}**")
    lines.append(f"- Missing script files: **{len(missing)}**")
    lines.append("")
    lines.append("### Per-Protocol Reference Quality")
    lines.append("")
    lines.append("| Protocol | References | Missing | Missing % |")
    lines.append("|----------|------------|---------|-----------|")
    for protocol, stats in sorted(per_protocol.items()):
        missing_count = stats["missing"]
        total = stats["total"]
        share = (missing_count / total) if total else 0
        lines.append(
            "| {protocol} | {total} | {missing} | {share:.0%} |".format(
                protocol=protocol.relative_to(REPO_ROOT),
                total=total,
                missing=missing_count,
                share=share,
            )
        )

    lines.append("")
    lines.append("## Missing References")
    lines.append("")
    if not missing:
        lines.append("All referenced scripts exist.")
    else:
        lines.append("| Protocol | Referenced Script | Status |")
        lines.append("|----------|-------------------|--------|")
        for ref in missing:
            lines.append(
                f"| {ref.protocol.relative_to(REPO_ROOT)} | {ref.script_path.relative_to(REPO_ROOT)} | Missing |"
            )

    lines.append("")
    lines.append("## Complete Reference Matrix")
    lines.append("")
    lines.append("| Protocol | Script | Exists |")
    lines.append("|----------|--------|--------|")
    for ref in references:
        status = "Yes" if ref.exists else "No"
        lines.append(
            f"| {ref.protocol.relative_to(REPO_ROOT)} | {ref.script_path.relative_to(REPO_ROOT)} | {status} |"
        )

    lines.append("")
    return "\n".join(lines)


def main() -> None:
    references = collect_references()
    report = render_report(references)
    output_path = REPO_ROOT / "documentation" / "protocol-script-reference-report.md"
    output_path.write_text(report, encoding="utf-8")


if __name__ == "__main__":
    main()
